
USB_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800699c  0800699c  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  0800699c  0800699c  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800699c  0800699c  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080069a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  2000018c  08006b30  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001350  08006b30  00021350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011090  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad8  00000000  00000000  00031245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00033d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001945a  00000000  00000000  00035008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d380  00000000  00000000  0004e462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844a6  00000000  00000000  0005b7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfc88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002674  00000000  00000000  000dfcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800691c 	.word	0x0800691c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	0800691c 	.word	0x0800691c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f92e 	bl	80003b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f868 	bl	800022c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f005 ff0e 	bl	8005f7c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	CDC_Transmit_FS(&buffer[0], sizeof(buffer));
 8000160:	210e      	movs	r1, #14
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <main+0x28>)
 8000164:	f005 ffc8 	bl	80060f8 <CDC_Transmit_FS>
	HAL_Delay(1000);
 8000168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016c:	f000 f982 	bl	8000474 <HAL_Delay>
	CDC_Transmit_FS(&buffer[0], sizeof(buffer));
 8000170:	e7f6      	b.n	8000160 <main+0x14>
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f006 fbc0 	bl	800690c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fe12 	bl	8001df8 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001da:	f000 f849 	bl	8000270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 f87c 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000206:	f000 f833 	bl	8000270 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800020a:	2310      	movs	r3, #16
 800020c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800020e:	2300      	movs	r3, #0
 8000210:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f002 f9d7 	bl	80025c8 <HAL_RCCEx_PeriphCLKConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000220:	f000 f826 	bl	8000270 <Error_Handler>
  }
}
 8000224:	bf00      	nop
 8000226:	3750      	adds	r7, #80	; 0x50
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <MX_GPIO_Init+0x40>)
 8000234:	699b      	ldr	r3, [r3, #24]
 8000236:	4a0d      	ldr	r2, [pc, #52]	; (800026c <MX_GPIO_Init+0x40>)
 8000238:	f043 0320 	orr.w	r3, r3, #32
 800023c:	6193      	str	r3, [r2, #24]
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <MX_GPIO_Init+0x40>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	f003 0320 	and.w	r3, r3, #32
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <MX_GPIO_Init+0x40>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	683b      	ldr	r3, [r7, #0]

}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	40021000 	.word	0x40021000

08000270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000274:	b672      	cpsid	i
}
 8000276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000278:	e7fe      	b.n	8000278 <Error_Handler+0x8>
	...

0800027c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <HAL_MspInit+0x5c>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <HAL_MspInit+0x5c>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <HAL_MspInit+0x5c>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <HAL_MspInit+0x5c>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <HAL_MspInit+0x5c>)
 80002a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a4:	61d3      	str	r3, [r2, #28]
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <HAL_MspInit+0x5c>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <HAL_MspInit+0x60>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <HAL_MspInit+0x60>)
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ce:	bf00      	nop
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010000 	.word	0x40010000

080002e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <NMI_Handler+0x4>

080002e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ea:	e7fe      	b.n	80002ea <HardFault_Handler+0x4>

080002ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <MemManage_Handler+0x4>

080002f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <BusFault_Handler+0x4>

080002f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <UsageFault_Handler+0x4>

080002fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr

0800030a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr

08000316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000326:	f000 f889 	bl	800043c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000336:	f000 faff 	bl	8000938 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20001064 	.word	0x20001064

08000344 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000348:	4802      	ldr	r0, [pc, #8]	; (8000354 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800034a:	f000 faf5 	bl	8000938 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20001064 	.word	0x20001064

08000358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000364:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000366:	e003      	b.n	8000370 <LoopCopyDataInit>

08000368 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800036a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800036c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800036e:	3104      	adds	r1, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000374:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000376:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000378:	d3f6      	bcc.n	8000368 <CopyDataInit>
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800037c:	e002      	b.n	8000384 <LoopFillZerobss>

0800037e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000380:	f842 3b04 	str.w	r3, [r2], #4

08000384 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000386:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000388:	d3f9      	bcc.n	800037e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800038a:	f7ff ffe5 	bl	8000358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038e:	f006 fa99 	bl	80068c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff fedb 	bl	800014c <main>
  bx lr
 8000396:	4770      	bx	lr
  ldr r3, =_sidata
 8000398:	080069a4 	.word	0x080069a4
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003a0:	2000018c 	.word	0x2000018c
  ldr r2, =_sbss
 80003a4:	2000018c 	.word	0x2000018c
  ldr r3, = _ebss
 80003a8:	20001350 	.word	0x20001350

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <HAL_Init+0x28>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <HAL_Init+0x28>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003c0:	2003      	movs	r0, #3
 80003c2:	f000 f947 	bl	8000654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 f808 	bl	80003dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003cc:	f7ff ff56 	bl	800027c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003d0:	2300      	movs	r3, #0
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40022000 	.word	0x40022000

080003dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_InitTick+0x54>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_InitTick+0x58>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	4619      	mov	r1, r3
 80003ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f95f 	bl	80006be <HAL_SYSTICK_Config>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000406:	2301      	movs	r3, #1
 8000408:	e00e      	b.n	8000428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2b0f      	cmp	r3, #15
 800040e:	d80a      	bhi.n	8000426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000410:	2200      	movs	r2, #0
 8000412:	6879      	ldr	r1, [r7, #4]
 8000414:	f04f 30ff 	mov.w	r0, #4294967295
 8000418:	f000 f927 	bl	800066a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800041c:	4a06      	ldr	r2, [pc, #24]	; (8000438 <HAL_InitTick+0x5c>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000422:	2300      	movs	r3, #0
 8000424:	e000      	b.n	8000428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000426:	2301      	movs	r3, #1
}
 8000428:	4618      	mov	r0, r3
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000010 	.word	0x20000010
 8000434:	20000018 	.word	0x20000018
 8000438:	20000014 	.word	0x20000014

0800043c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <HAL_IncTick+0x1c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <HAL_IncTick+0x20>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4413      	add	r3, r2
 800044c:	4a03      	ldr	r2, [pc, #12]	; (800045c <HAL_IncTick+0x20>)
 800044e:	6013      	str	r3, [r2, #0]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	20000018 	.word	0x20000018
 800045c:	200003cc 	.word	0x200003cc

08000460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  return uwTick;
 8000464:	4b02      	ldr	r3, [pc, #8]	; (8000470 <HAL_GetTick+0x10>)
 8000466:	681b      	ldr	r3, [r3, #0]
}
 8000468:	4618      	mov	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	200003cc 	.word	0x200003cc

08000474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800047c:	f7ff fff0 	bl	8000460 <HAL_GetTick>
 8000480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800048c:	d005      	beq.n	800049a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <HAL_Delay+0x44>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4413      	add	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800049a:	bf00      	nop
 800049c:	f7ff ffe0 	bl	8000460 <HAL_GetTick>
 80004a0:	4602      	mov	r2, r0
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d8f7      	bhi.n	800049c <HAL_Delay+0x28>
  {
  }
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000018 	.word	0x20000018

080004bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f003 0307 	and.w	r3, r3, #7
 80004ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <__NVIC_SetPriorityGrouping+0x44>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004d8:	4013      	ands	r3, r2
 80004da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <__NVIC_SetPriorityGrouping+0x44>)
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	60d3      	str	r3, [r2, #12]
}
 80004f4:	bf00      	nop
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <__NVIC_GetPriorityGrouping+0x18>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	f003 0307 	and.w	r3, r3, #7
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052e:	2b00      	cmp	r3, #0
 8000530:	db0b      	blt.n	800054a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f003 021f 	and.w	r2, r3, #31
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <__NVIC_EnableIRQ+0x34>)
 800053a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053e:	095b      	lsrs	r3, r3, #5
 8000540:	2001      	movs	r0, #1
 8000542:	fa00 f202 	lsl.w	r2, r0, r2
 8000546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	e000e100 	.word	0xe000e100

08000558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000568:	2b00      	cmp	r3, #0
 800056a:	db0a      	blt.n	8000582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	b2da      	uxtb	r2, r3
 8000570:	490c      	ldr	r1, [pc, #48]	; (80005a4 <__NVIC_SetPriority+0x4c>)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	0112      	lsls	r2, r2, #4
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	440b      	add	r3, r1
 800057c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000580:	e00a      	b.n	8000598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4908      	ldr	r1, [pc, #32]	; (80005a8 <__NVIC_SetPriority+0x50>)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 030f 	and.w	r3, r3, #15
 800058e:	3b04      	subs	r3, #4
 8000590:	0112      	lsls	r2, r2, #4
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	440b      	add	r3, r1
 8000596:	761a      	strb	r2, [r3, #24]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000e100 	.word	0xe000e100
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	f1c3 0307 	rsb	r3, r3, #7
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	bf28      	it	cs
 80005ca:	2304      	movcs	r3, #4
 80005cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	3304      	adds	r3, #4
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	d902      	bls.n	80005dc <NVIC_EncodePriority+0x30>
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3b03      	subs	r3, #3
 80005da:	e000      	b.n	80005de <NVIC_EncodePriority+0x32>
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	f04f 32ff 	mov.w	r2, #4294967295
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	43da      	mvns	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	401a      	ands	r2, r3
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f4:	f04f 31ff 	mov.w	r1, #4294967295
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	43d9      	mvns	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	4313      	orrs	r3, r2
         );
}
 8000606:	4618      	mov	r0, r3
 8000608:	3724      	adds	r7, #36	; 0x24
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000620:	d301      	bcc.n	8000626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2301      	movs	r3, #1
 8000624:	e00f      	b.n	8000646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <SysTick_Config+0x40>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3b01      	subs	r3, #1
 800062c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800062e:	210f      	movs	r1, #15
 8000630:	f04f 30ff 	mov.w	r0, #4294967295
 8000634:	f7ff ff90 	bl	8000558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SysTick_Config+0x40>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SysTick_Config+0x40>)
 8000640:	2207      	movs	r2, #7
 8000642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	e000e010 	.word	0xe000e010

08000654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff2d 	bl	80004bc <__NVIC_SetPriorityGrouping>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800067c:	f7ff ff42 	bl	8000504 <__NVIC_GetPriorityGrouping>
 8000680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	6978      	ldr	r0, [r7, #20]
 8000688:	f7ff ff90 	bl	80005ac <NVIC_EncodePriority>
 800068c:	4602      	mov	r2, r0
 800068e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff5f 	bl	8000558 <__NVIC_SetPriority>
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	4603      	mov	r3, r0
 80006aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff35 	bl	8000520 <__NVIC_EnableIRQ>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ffa2 	bl	8000610 <SysTick_Config>
 80006cc:	4603      	mov	r3, r0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d8:	b08b      	sub	sp, #44	; 0x2c
 80006da:	af06      	add	r7, sp, #24
 80006dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e0fd      	b.n	80008e4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d106      	bne.n	8000702 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f005 fe2f 	bl	8006360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2203      	movs	r2, #3
 8000706:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f002 f836 	bl	8002780 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	687e      	ldr	r6, [r7, #4]
 800071c:	466d      	mov	r5, sp
 800071e:	f106 0410 	add.w	r4, r6, #16
 8000722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	602b      	str	r3, [r5, #0]
 800072a:	1d33      	adds	r3, r6, #4
 800072c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072e:	6838      	ldr	r0, [r7, #0]
 8000730:	f002 f800 	bl	8002734 <USB_CoreInit>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d005      	beq.n	8000746 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2202      	movs	r2, #2
 800073e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e0ce      	b.n	80008e4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f831 	bl	80027b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	e04c      	b.n	80007f2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	440b      	add	r3, r1
 8000768:	3301      	adds	r3, #1
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	440b      	add	r3, r1
 800077e:	7bfa      	ldrb	r2, [r7, #15]
 8000780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	b298      	uxth	r0, r3
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	4613      	mov	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	440b      	add	r3, r1
 8000794:	3336      	adds	r3, #54	; 0x36
 8000796:	4602      	mov	r2, r0
 8000798:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	440b      	add	r3, r1
 80007aa:	3303      	adds	r3, #3
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	440b      	add	r3, r1
 80007be:	3338      	adds	r3, #56	; 0x38
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007c4:	7bfa      	ldrb	r2, [r7, #15]
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	333c      	adds	r3, #60	; 0x3c
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	440b      	add	r3, r1
 80007e6:	3340      	adds	r3, #64	; 0x40
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	3301      	adds	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3ad      	bcc.n	8000758 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e044      	b.n	800088c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000818:	7bfa      	ldrb	r2, [r7, #15]
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	440b      	add	r3, r1
 8000826:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800082e:	7bfa      	ldrb	r2, [r7, #15]
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000844:	7bfa      	ldrb	r2, [r7, #15]
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	4613      	mov	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	440b      	add	r3, r1
 8000852:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800085a:	7bfa      	ldrb	r2, [r7, #15]
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	440b      	add	r3, r1
 8000868:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000870:	7bfa      	ldrb	r2, [r7, #15]
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	3301      	adds	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	7bfa      	ldrb	r2, [r7, #15]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3b5      	bcc.n	8000802 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	687e      	ldr	r6, [r7, #4]
 800089e:	466d      	mov	r5, sp
 80008a0:	f106 0410 	add.w	r4, r6, #16
 80008a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	602b      	str	r3, [r5, #0]
 80008ac:	1d33      	adds	r3, r6, #4
 80008ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b0:	6838      	ldr	r0, [r7, #0]
 80008b2:	f001 ff8b 	bl	80027cc <USB_DevInit>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2202      	movs	r2, #2
 80008c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e00d      	b.n	80008e4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2201      	movs	r2, #1
 80008d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 ff25 	bl	800472c <USB_DevDisconnect>

  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d101      	bne.n	8000902 <HAL_PCD_Start+0x16>
 80008fe:	2302      	movs	r3, #2
 8000900:	e016      	b.n	8000930 <HAL_PCD_Start+0x44>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f001 ff20 	bl	8002754 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000914:	2101      	movs	r1, #1
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f005 ff9d 	bl	8006856 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fef9 	bl	8004718 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fefb 	bl	8004740 <USB_ReadInterrupts>
 800094a:	4603      	mov	r3, r0
 800094c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000954:	d102      	bne.n	800095c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 fb61 	bl	800101e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f003 feed 	bl	8004740 <USB_ReadInterrupts>
 8000966:	4603      	mov	r3, r0
 8000968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000970:	d112      	bne.n	8000998 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000984:	b292      	uxth	r2, r2
 8000986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f005 fd6b 	bl	8006466 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000990:	2100      	movs	r1, #0
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f925 	bl	8000be2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fecf 	bl	8004740 <USB_ReadInterrupts>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009ac:	d10b      	bne.n	80009c6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009c0:	b292      	uxth	r2, r2
 80009c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 feb8 	bl	8004740 <USB_ReadInterrupts>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009da:	d10b      	bne.n	80009f4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009ee:	b292      	uxth	r2, r2
 80009f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fea1 	bl	8004740 <USB_ReadInterrupts>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a08:	d126      	bne.n	8000a58 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0204 	bic.w	r2, r2, #4
 8000a1c:	b292      	uxth	r2, r2
 8000a1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0208 	bic.w	r2, r2, #8
 8000a34:	b292      	uxth	r2, r2
 8000a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f005 fd4c 	bl	80064d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a52:	b292      	uxth	r2, r2
 8000a54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fe6f 	bl	8004740 <USB_ReadInterrupts>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a6c:	f040 8084 	bne.w	8000b78 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	77fb      	strb	r3, [r7, #31]
 8000a74:	e011      	b.n	8000a9a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	7ffb      	ldrb	r3, [r7, #31]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	441a      	add	r2, r3
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	8812      	ldrh	r2, [r2, #0]
 8000a86:	b292      	uxth	r2, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	f107 0120 	add.w	r1, r7, #32
 8000a8e:	440b      	add	r3, r1
 8000a90:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000a94:	7ffb      	ldrb	r3, [r7, #31]
 8000a96:	3301      	adds	r3, #1
 8000a98:	77fb      	strb	r3, [r7, #31]
 8000a9a:	7ffb      	ldrb	r3, [r7, #31]
 8000a9c:	2b07      	cmp	r3, #7
 8000a9e:	d9ea      	bls.n	8000a76 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0201 	orr.w	r2, r2, #1
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0201 	bic.w	r2, r2, #1
 8000aca:	b292      	uxth	r2, r2
 8000acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000ad0:	bf00      	nop
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f6      	beq.n	8000ad2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000af6:	b292      	uxth	r2, r2
 8000af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	77fb      	strb	r3, [r7, #31]
 8000b00:	e010      	b.n	8000b24 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	6812      	ldr	r2, [r2, #0]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	7ffa      	ldrb	r2, [r7, #31]
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	440a      	add	r2, r1
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	f107 0120 	add.w	r1, r7, #32
 8000b16:	440b      	add	r3, r1
 8000b18:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000b1c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	3301      	adds	r3, #1
 8000b22:	77fb      	strb	r3, [r7, #31]
 8000b24:	7ffb      	ldrb	r3, [r7, #31]
 8000b26:	2b07      	cmp	r3, #7
 8000b28:	d9eb      	bls.n	8000b02 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f042 0208 	orr.w	r2, r2, #8
 8000b3c:	b292      	uxth	r2, r2
 8000b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b54:	b292      	uxth	r2, r2
 8000b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f042 0204 	orr.w	r2, r2, #4
 8000b6c:	b292      	uxth	r2, r2
 8000b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f005 fc96 	bl	80064a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 fddf 	bl	8004740 <USB_ReadInterrupts>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8c:	d10e      	bne.n	8000bac <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f005 fc4f 	bl	800644a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fdc5 	bl	8004740 <USB_ReadInterrupts>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc0:	d10b      	bne.n	8000bda <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd4:	b292      	uxth	r2, r2
 8000bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <HAL_PCD_SetAddress+0x1a>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e013      	b.n	8000c24 <HAL_PCD_SetAddress+0x42>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	78fa      	ldrb	r2, [r7, #3]
 8000c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	78fa      	ldrb	r2, [r7, #3]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fd6c 	bl	80046f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	70fb      	strb	r3, [r7, #3]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	803b      	strh	r3, [r7, #0]
 8000c42:	4613      	mov	r3, r2
 8000c44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da0e      	bge.n	8000c70 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	705a      	strb	r2, [r3, #1]
 8000c6e:	e00e      	b.n	8000c8e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	f003 0207 	and.w	r2, r3, #7
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c9a:	883a      	ldrh	r2, [r7, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	78ba      	ldrb	r2, [r7, #2]
 8000ca4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d004      	beq.n	8000cb8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000cb8:	78bb      	ldrb	r3, [r7, #2]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d102      	bne.n	8000cc4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_PCD_EP_Open+0xa6>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e00e      	b.n	8000cf0 <HAL_PCD_EP_Open+0xc4>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68f9      	ldr	r1, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fd93 	bl	800280c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000cee:	7afb      	ldrb	r3, [r7, #11]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	da0e      	bge.n	8000d2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2201      	movs	r2, #1
 8000d26:	705a      	strb	r2, [r3, #1]
 8000d28:	e00e      	b.n	8000d48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	f003 0207 	and.w	r2, r3, #7
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d101      	bne.n	8000d62 <HAL_PCD_EP_Close+0x6a>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e00e      	b.n	8000d80 <HAL_PCD_EP_Close+0x88>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68f9      	ldr	r1, [r7, #12]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f8b5 	bl	8002ee0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	460b      	mov	r3, r1
 8000d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	f003 0207 	and.w	r2, r3, #7
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6979      	ldr	r1, [r7, #20]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fa67 	bl	80032b8 <USB_EPStartXfer>
 8000dea:	e005      	b.n	8000df8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6979      	ldr	r1, [r7, #20]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fa60 	bl	80032b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	f003 0207 	and.w	r2, r3, #7
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e24:	681b      	ldr	r3, [r3, #0]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e40:	7afb      	ldrb	r3, [r7, #11]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d106      	bne.n	8000ea0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6979      	ldr	r1, [r7, #20]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fa0d 	bl	80032b8 <USB_EPStartXfer>
 8000e9e:	e005      	b.n	8000eac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6979      	ldr	r1, [r7, #20]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fa06 	bl	80032b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	f003 0207 	and.w	r2, r3, #7
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d901      	bls.n	8000ed4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e04c      	b.n	8000f6e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da0e      	bge.n	8000efa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	705a      	strb	r2, [r3, #1]
 8000ef8:	e00c      	b.n	8000f14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000efa:	78fa      	ldrb	r2, [r7, #3]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2201      	movs	r2, #1
 8000f18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <HAL_PCD_EP_SetStall+0x7e>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e01c      	b.n	8000f6e <HAL_PCD_EP_SetStall+0xb8>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68f9      	ldr	r1, [r7, #12]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fad8 	bl	80044f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d108      	bne.n	8000f64 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f003 fbfd 	bl	800475e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	f003 020f 	and.w	r2, r3, #15
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d901      	bls.n	8000f94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e040      	b.n	8001016 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da0e      	bge.n	8000fba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	705a      	strb	r2, [r3, #1]
 8000fb8:	e00e      	b.n	8000fd8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	f003 0207 	and.w	r2, r3, #7
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_PCD_EP_ClrStall+0x82>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e00e      	b.n	8001016 <HAL_PCD_EP_ClrStall+0xa0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68f9      	ldr	r1, [r7, #12]
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fac6 	bl	8004598 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b08e      	sub	sp, #56	; 0x38
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001026:	e2df      	b.n	80015e8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001030:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001032:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800103e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 8158 	bne.w	80012f8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001048:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d152      	bne.n	80010f8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800105e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001062:	81fb      	strh	r3, [r7, #14]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800106e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001072:	b29b      	uxth	r3, r3
 8001074:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3328      	adds	r3, #40	; 0x28
 800107a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001084:	b29b      	uxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	3302      	adds	r3, #2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	4413      	add	r3, r2
 800109a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	441a      	add	r2, r3
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f005 f9ac 	bl	8006416 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 828e 	beq.w	80015e8 <PCD_EP_ISR_Handler+0x5ca>
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 8289 	bne.w	80015e8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010f6:	e277      	b.n	80015e8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001108:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800110a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800110e:	2b00      	cmp	r3, #0
 8001110:	d034      	beq.n	800117c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	3306      	adds	r3, #6
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	4413      	add	r3, r2
 8001130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001150:	b29b      	uxth	r3, r3
 8001152:	f003 fb54 	bl	80047fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
 800115e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001162:	4013      	ands	r3, r2
 8001164:	823b      	strh	r3, [r7, #16]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	8a3a      	ldrh	r2, [r7, #16]
 800116c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001170:	b292      	uxth	r2, r2
 8001172:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f005 f921 	bl	80063bc <HAL_PCD_SetupStageCallback>
 800117a:	e235      	b.n	80015e8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800117c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001180:	2b00      	cmp	r3, #0
 8001182:	f280 8231 	bge.w	80015e8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29a      	uxth	r2, r3
 800118e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001192:	4013      	ands	r3, r2
 8001194:	83bb      	strh	r3, [r7, #28]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	8bba      	ldrh	r2, [r7, #28]
 800119c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a0:	b292      	uxth	r2, r2
 80011a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	3306      	adds	r3, #6
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d019      	beq.n	800120c <PCD_EP_ISR_Handler+0x1ee>
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d015      	beq.n	800120c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	6959      	ldr	r1, [r3, #20]
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	f003 fb04 	bl	80047fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	441a      	add	r2, r3
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001204:	2100      	movs	r1, #0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f005 f8ea 	bl	80063e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800121a:	b29b      	uxth	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4413      	add	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d112      	bne.n	800125a <PCD_EP_ISR_Handler+0x23c>
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800123e:	b29a      	uxth	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	801a      	strh	r2, [r3, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800124e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001252:	b29a      	uxth	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	801a      	strh	r2, [r3, #0]
 8001258:	e02f      	b.n	80012ba <PCD_EP_ISR_Handler+0x29c>
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b3e      	cmp	r3, #62	; 0x3e
 8001260:	d813      	bhi.n	800128a <PCD_EP_ISR_Handler+0x26c>
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	085b      	lsrs	r3, r3, #1
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <PCD_EP_ISR_Handler+0x25e>
 8001276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001278:	3301      	adds	r3, #1
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
 800127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127e:	b29b      	uxth	r3, r3
 8001280:	029b      	lsls	r3, r3, #10
 8001282:	b29a      	uxth	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	801a      	strh	r2, [r3, #0]
 8001288:	e017      	b.n	80012ba <PCD_EP_ISR_Handler+0x29c>
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <PCD_EP_ISR_Handler+0x286>
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	3b01      	subs	r3, #1
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
 80012a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ca:	827b      	strh	r3, [r7, #18]
 80012cc:	8a7b      	ldrh	r3, [r7, #18]
 80012ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012d2:	827b      	strh	r3, [r7, #18]
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012da:	827b      	strh	r3, [r7, #18]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	8a7b      	ldrh	r3, [r7, #18]
 80012e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	8013      	strh	r3, [r2, #0]
 80012f6:	e177      	b.n	80015e8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800130a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800130e:	2b00      	cmp	r3, #0
 8001310:	f280 80ea 	bge.w	80014e8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29a      	uxth	r2, r3
 8001326:	f640 738f 	movw	r3, #3983	; 0xf8f
 800132a:	4013      	ands	r3, r2
 800132c:	853b      	strh	r3, [r7, #40]	; 0x28
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800133e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001342:	b292      	uxth	r2, r2
 8001344:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001346:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	7b1b      	ldrb	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d122      	bne.n	80013aa <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800136c:	b29b      	uxth	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4413      	add	r3, r2
 8001378:	3306      	adds	r3, #6
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800138c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800138e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8087 	beq.w	80014a4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	6959      	ldr	r1, [r3, #20]
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	88da      	ldrh	r2, [r3, #6]
 80013a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013a4:	f003 fa2b 	bl	80047fe <USB_ReadPMA>
 80013a8:	e07c      	b.n	80014a4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	78db      	ldrb	r3, [r3, #3]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d108      	bne.n	80013c4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013b4:	461a      	mov	r2, r3
 80013b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f923 	bl	8001604 <HAL_PCD_EP_DB_Receive>
 80013be:	4603      	mov	r3, r0
 80013c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80013c2:	e06f      	b.n	80014a4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013de:	847b      	strh	r3, [r7, #34]	; 0x22
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	441a      	add	r2, r3
 80013ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001400:	b29b      	uxth	r3, r3
 8001402:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d021      	beq.n	8001462 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	3302      	adds	r3, #2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001446:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001448:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800144a:	2b00      	cmp	r3, #0
 800144c:	d02a      	beq.n	80014a4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	6959      	ldr	r1, [r3, #20]
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	891a      	ldrh	r2, [r3, #8]
 800145a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800145c:	f003 f9cf 	bl	80047fe <USB_ReadPMA>
 8001460:	e020      	b.n	80014a4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800146a:	b29b      	uxth	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	3306      	adds	r3, #6
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4413      	add	r3, r2
 8001480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800148a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800148c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800148e:	2b00      	cmp	r3, #0
 8001490:	d008      	beq.n	80014a4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	895a      	ldrh	r2, [r3, #10]
 800149e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014a0:	f003 f9ad 	bl	80047fe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	69da      	ldr	r2, [r3, #28]
 80014a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014aa:	441a      	add	r2, r3
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014b6:	441a      	add	r2, r3
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <PCD_EP_ISR_Handler+0x4b0>
 80014c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d206      	bcs.n	80014dc <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f004 ff83 	bl	80063e0 <HAL_PCD_DataOutStageCallback>
 80014da:	e005      	b.n	80014e8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fee8 	bl	80032b8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d07a      	beq.n	80015e8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80014f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800151c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001520:	843b      	strh	r3, [r7, #32]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	441a      	add	r2, r3
 8001530:	8c3b      	ldrh	r3, [r7, #32]
 8001532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800153a:	b29b      	uxth	r3, r3
 800153c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	78db      	ldrb	r3, [r3, #3]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d108      	bne.n	8001558 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800154a:	2b02      	cmp	r3, #2
 800154c:	d146      	bne.n	80015dc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800154e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d141      	bne.n	80015dc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	3302      	adds	r3, #2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	4413      	add	r3, r2
 8001576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001580:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	8bfb      	ldrh	r3, [r7, #30]
 8001588:	429a      	cmp	r2, r3
 800158a:	d906      	bls.n	800159a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	8bfb      	ldrh	r3, [r7, #30]
 8001592:	1ad2      	subs	r2, r2, r3
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	619a      	str	r2, [r3, #24]
 8001598:	e002      	b.n	80015a0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d106      	bne.n	80015b6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f004 ff31 	bl	8006416 <HAL_PCD_DataInStageCallback>
 80015b4:	e018      	b.n	80015e8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	8bfb      	ldrh	r3, [r7, #30]
 80015bc:	441a      	add	r2, r3
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	441a      	add	r2, r3
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fe6f 	bl	80032b8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80015da:	e005      	b.n	80015e8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80015dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015de:	461a      	mov	r2, r3
 80015e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f91b 	bl	800181e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f6ff ad17 	blt.w	8001028 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3738      	adds	r7, #56	; 0x38
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d07e      	beq.n	800171a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001624:	b29b      	uxth	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	3302      	adds	r3, #2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	4413      	add	r3, r2
 800163a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001644:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	8b7b      	ldrh	r3, [r7, #26]
 800164c:	429a      	cmp	r2, r3
 800164e:	d306      	bcc.n	800165e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	8b7b      	ldrh	r3, [r7, #26]
 8001656:	1ad2      	subs	r2, r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	e002      	b.n	8001664 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d123      	bne.n	80016b4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001686:	833b      	strh	r3, [r7, #24]
 8001688:	8b3b      	ldrh	r3, [r7, #24]
 800168a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800168e:	833b      	strh	r3, [r7, #24]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	441a      	add	r2, r3
 800169e:	8b3b      	ldrh	r3, [r7, #24]
 80016a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01f      	beq.n	80016fe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d8:	82fb      	strh	r3, [r7, #22]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	441a      	add	r2, r3
 80016e8:	8afb      	ldrh	r3, [r7, #22]
 80016ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80016fe:	8b7b      	ldrh	r3, [r7, #26]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8087 	beq.w	8001814 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	6959      	ldr	r1, [r3, #20]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	891a      	ldrh	r2, [r3, #8]
 8001712:	8b7b      	ldrh	r3, [r7, #26]
 8001714:	f003 f873 	bl	80047fe <USB_ReadPMA>
 8001718:	e07c      	b.n	8001814 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001722:	b29b      	uxth	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	3306      	adds	r3, #6
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001742:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	8b7b      	ldrh	r3, [r7, #26]
 800174a:	429a      	cmp	r2, r3
 800174c:	d306      	bcc.n	800175c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	8b7b      	ldrh	r3, [r7, #26]
 8001754:	1ad2      	subs	r2, r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	e002      	b.n	8001762 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d123      	bne.n	80017b2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001784:	83fb      	strh	r3, [r7, #30]
 8001786:	8bfb      	ldrh	r3, [r7, #30]
 8001788:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800178c:	83fb      	strh	r3, [r7, #30]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	441a      	add	r2, r3
 800179c:	8bfb      	ldrh	r3, [r7, #30]
 800179e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d11f      	bne.n	80017fc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d6:	83bb      	strh	r3, [r7, #28]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	441a      	add	r2, r3
 80017e6:	8bbb      	ldrh	r3, [r7, #28]
 80017e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80017fc:	8b7b      	ldrh	r3, [r7, #26]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	6959      	ldr	r1, [r3, #20]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	895a      	ldrh	r2, [r3, #10]
 800180e:	8b7b      	ldrh	r3, [r7, #26]
 8001810:	f002 fff5 	bl	80047fe <USB_ReadPMA>
    }
  }

  return count;
 8001814:	8b7b      	ldrh	r3, [r7, #26]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b094      	sub	sp, #80	; 0x50
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	4613      	mov	r3, r2
 800182a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8138 	beq.w	8001aa8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001840:	b29b      	uxth	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	3302      	adds	r3, #2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001860:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186c:	429a      	cmp	r2, r3
 800186e:	d907      	bls.n	8001880 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001878:	1ad2      	subs	r2, r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	e002      	b.n	8001886 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12c      	bne.n	80018e8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f004 fdbe 	bl	8006416 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 823a 	beq.w	8001d1a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c0:	82fb      	strh	r3, [r7, #22]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	441a      	add	r2, r3
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	8013      	strh	r3, [r2, #0]
 80018e6:	e218      	b.n	8001d1a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d01f      	beq.n	8001932 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	441a      	add	r2, r3
 800191c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800191e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800192a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192e:	b29b      	uxth	r3, r3
 8001930:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001938:	2b01      	cmp	r3, #1
 800193a:	f040 81ee 	bne.w	8001d1a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001946:	441a      	add	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001954:	441a      	add	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	429a      	cmp	r2, r3
 8001964:	d309      	bcc.n	800197a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001972:	1ad2      	subs	r2, r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	621a      	str	r2, [r3, #32]
 8001978:	e015      	b.n	80019a6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d107      	bne.n	8001992 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8001982:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001990:	e009      	b.n	80019a6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d155      	bne.n	8001a5a <HAL_PCD_EP_DB_Transmit+0x23c>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	011a      	lsls	r2, r3, #4
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d112      	bne.n	8001a02 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	801a      	strh	r2, [r3, #0]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	e047      	b.n	8001a92 <HAL_PCD_EP_DB_Transmit+0x274>
 8001a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a04:	2b3e      	cmp	r3, #62	; 0x3e
 8001a06:	d811      	bhi.n	8001a2c <HAL_PCD_EP_DB_Transmit+0x20e>
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_PCD_EP_DB_Transmit+0x200>
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	029b      	lsls	r3, r3, #10
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	e032      	b.n	8001a92 <HAL_PCD_EP_DB_Transmit+0x274>
 8001a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <HAL_PCD_EP_DB_Transmit+0x224>
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	801a      	strh	r2, [r3, #0]
 8001a58:	e01b      	b.n	8001a92 <HAL_PCD_EP_DB_Transmit+0x274>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	785b      	ldrb	r3, [r3, #1]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d117      	bne.n	8001a92 <HAL_PCD_EP_DB_Transmit+0x274>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	4413      	add	r3, r2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	011a      	lsls	r2, r3, #4
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	4413      	add	r3, r2
 8001a84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	6959      	ldr	r1, [r3, #20]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	891a      	ldrh	r2, [r3, #8]
 8001a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f002 fe67 	bl	8004774 <USB_WritePMA>
 8001aa6:	e138      	b.n	8001d1a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	3306      	adds	r3, #6
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d307      	bcc.n	8001af0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ae8:	1ad2      	subs	r2, r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	619a      	str	r2, [r3, #24]
 8001aee:	e002      	b.n	8001af6 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12e      	bne.n	8001b5c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f004 fc86 	bl	8006416 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 8102 	bne.w	8001d1a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	441a      	add	r2, r3
 8001b42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	8013      	strh	r3, [r2, #0]
 8001b5a:	e0de      	b.n	8001d1a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11f      	bne.n	8001ba6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b80:	867b      	strh	r3, [r7, #50]	; 0x32
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	441a      	add	r2, r3
 8001b90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	f040 80b4 	bne.w	8001d1a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bba:	441a      	add	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bc8:	441a      	add	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	6a1a      	ldr	r2, [r3, #32]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d309      	bcc.n	8001bee <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be6:	1ad2      	subs	r2, r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	621a      	str	r2, [r3, #32]
 8001bec:	e015      	b.n	8001c1a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d107      	bne.n	8001c06 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8001bf6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c04:	e009      	b.n	8001c1a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d155      	bne.n	8001cd4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3c:	4413      	add	r3, r2
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	011a      	lsls	r2, r3, #4
 8001c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c48:	4413      	add	r3, r2
 8001c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d112      	bne.n	8001c7c <HAL_PCD_EP_DB_Transmit+0x45e>
 8001c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	e044      	b.n	8001d06 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8001c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c80:	d811      	bhi.n	8001ca6 <HAL_PCD_EP_DB_Transmit+0x488>
 8001c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c94:	3301      	adds	r3, #1
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	801a      	strh	r2, [r3, #0]
 8001ca4:	e02f      	b.n	8001d06 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8001ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_PCD_EP_DB_Transmit+0x49e>
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	029b      	lsls	r3, r3, #10
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	e018      	b.n	8001d06 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d114      	bne.n	8001d06 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cea:	4413      	add	r3, r2
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	011a      	lsls	r2, r3, #4
 8001cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d04:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	6959      	ldr	r1, [r3, #20]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	895a      	ldrh	r2, [r3, #10]
 8001d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f002 fd2d 	bl	8004774 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d34:	82bb      	strh	r3, [r7, #20]
 8001d36:	8abb      	ldrh	r3, [r7, #20]
 8001d38:	f083 0310 	eor.w	r3, r3, #16
 8001d3c:	82bb      	strh	r3, [r7, #20]
 8001d3e:	8abb      	ldrh	r3, [r7, #20]
 8001d40:	f083 0320 	eor.w	r3, r3, #32
 8001d44:	82bb      	strh	r3, [r7, #20]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	441a      	add	r2, r3
 8001d54:	8abb      	ldrh	r3, [r7, #20]
 8001d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3750      	adds	r7, #80	; 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	817b      	strh	r3, [r7, #10]
 8001d82:	4613      	mov	r3, r2
 8001d84:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001d86:	897b      	ldrh	r3, [r7, #10]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d92:	897b      	ldrh	r3, [r7, #10]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e009      	b.n	8001dbe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001daa:	897a      	ldrh	r2, [r7, #10]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001dbe:	893b      	ldrh	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	80da      	strh	r2, [r3, #6]
 8001dd2:	e00b      	b.n	8001dec <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e26c      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e24:	4b8f      	ldr	r3, [pc, #572]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
 8001e30:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x12c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e246      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x76>
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b78      	ldr	r3, [pc, #480]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xbc>
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a71      	ldr	r2, [pc, #452]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001eb4:	4b6b      	ldr	r3, [pc, #428]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fac4 	bl	8000460 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe fac0 	bl	8000460 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1fa      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe4>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fab0 	bl	8000460 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7fe faac 	bl	8000460 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1e6      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x10c>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1ba      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4939      	ldr	r1, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fa65 	bl	8000460 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7fe fa61 	bl	8000460 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e19b      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4927      	ldr	r1, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fa44 	bl	8000460 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fa40 	bl	8000460 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e17a      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03a      	beq.n	800207c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7fe fa24 	bl	8000460 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7fe fa20 	bl	8000460 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e15a      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 faa6 	bl	800258c <RCC_Delay>
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe fa0a 	bl	8000460 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe fa06 	bl	8000460 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d908      	bls.n	8002070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e140      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	42420000 	.word	0x42420000
 800206c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e9      	bne.n	8002050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a6 	beq.w	80021d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b97      	ldr	r3, [pc, #604]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b94      	ldr	r3, [pc, #592]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a93      	ldr	r2, [pc, #588]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b91      	ldr	r3, [pc, #580]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b8e      	ldr	r3, [pc, #568]	; (80022f0 <HAL_RCC_OscConfig+0x4f8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b8b      	ldr	r3, [pc, #556]	; (80022f0 <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a8a      	ldr	r2, [pc, #552]	; (80022f0 <HAL_RCC_OscConfig+0x4f8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe f9c7 	bl	8000460 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe f9c3 	bl	8000460 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e0fd      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x4f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020fc:	4b7b      	ldr	r3, [pc, #492]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a7a      	ldr	r2, [pc, #488]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e02d      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x334>
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a75      	ldr	r2, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a72      	ldr	r2, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	e01c      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x356>
 8002134:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a6c      	ldr	r2, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a66      	ldr	r2, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b64      	ldr	r3, [pc, #400]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a63      	ldr	r2, [pc, #396]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe f977 	bl	8000460 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe f973 	bl	8000460 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0ab      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b57      	ldr	r3, [pc, #348]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCC_OscConfig+0x37e>
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7fe f961 	bl	8000460 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe f95d 	bl	8000460 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e095      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b48      	ldr	r3, [pc, #288]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a47      	ldr	r2, [pc, #284]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8081 	beq.w	80022e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d061      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d146      	bne.n	8002282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_OscConfig+0x4fc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe f931 	bl	8000460 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe f92d 	bl	8000460 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e067      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d108      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	492d      	ldr	r1, [pc, #180]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a19      	ldr	r1, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	430b      	orrs	r3, r1
 800224e:	4927      	ldr	r1, [pc, #156]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x4fc>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe f901 	bl	8000460 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe f8fd 	bl	8000460 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e037      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x46a>
 8002280:	e02f      	b.n	80022e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_RCC_OscConfig+0x4fc>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe f8ea 	bl	8000460 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe f8e6 	bl	8000460 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e020      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x498>
 80022ae:	e018      	b.n	80022e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e013      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x4f4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	42420060 	.word	0x42420060

080022f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0d0      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b6a      	ldr	r3, [pc, #424]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4965      	ldr	r1, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800235e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d040      	beq.n	8002418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e073      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06b      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7fe f83a 	bl	8000460 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7fe f836 	bl	8000460 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e053      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d210      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0207 	bic.w	r2, r3, #7
 800242e:	4922      	ldr	r1, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1cc>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd ff98 	bl	80003dc <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	0800698c 	.word	0x0800698c
 80024c4:	20000010 	.word	0x20000010
 80024c8:	20000014 	.word	0x20000014

080024cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	b490      	push	{r4, r7}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024d4:	1d3c      	adds	r4, r7, #4
 80024d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024dc:	f240 2301 	movw	r3, #513	; 0x201
 80024e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 8002506:	2b08      	cmp	r3, #8
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x46>
 800250a:	e02d      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800250e:	623b      	str	r3, [r7, #32]
      break;
 8002510:	e02d      	b.n	800256e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	0c9b      	lsrs	r3, r3, #18
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800251e:	4413      	add	r3, r2
 8002520:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002524:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	0c5b      	lsrs	r3, r3, #17
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800253e:	4413      	add	r3, r2
 8002540:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002544:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254a:	fb02 f203 	mul.w	r2, r2, r3
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	e004      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	623b      	str	r3, [r7, #32]
      break;
 8002566:	e002      	b.n	800256e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256a:	623b      	str	r3, [r7, #32]
      break;
 800256c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256e:	6a3b      	ldr	r3, [r7, #32]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3728      	adds	r7, #40	; 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bc90      	pop	{r4, r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	08006934 	.word	0x08006934
 8002580:	40021000 	.word	0x40021000
 8002584:	007a1200 	.word	0x007a1200
 8002588:	003d0900 	.word	0x003d0900

0800258c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <RCC_Delay+0x34>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <RCC_Delay+0x38>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a8:	bf00      	nop
  }
  while (Delay --);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	60fa      	str	r2, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f9      	bne.n	80025a8 <RCC_Delay+0x1c>
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000010 	.word	0x20000010
 80025c4:	10624dd3 	.word	0x10624dd3

080025c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d07d      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e8:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10d      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fe:	61d3      	str	r3, [r2, #28]
 8002600:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260c:	2301      	movs	r3, #1
 800260e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b46      	ldr	r3, [pc, #280]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d118      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002628:	f7fd ff1a 	bl	8000460 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	e008      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7fd ff16 	bl	8000460 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e06d      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002656:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02e      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d027      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002676:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267c:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002682:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d014      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fd fee5 	bl	8000460 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fd fee1 	bl	8000460 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e036      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ee      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4917      	ldr	r1, [pc, #92]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	490b      	ldr	r1, [pc, #44]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4904      	ldr	r1, [pc, #16]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	42420440 	.word	0x42420440

08002734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002734:	b084      	sub	sp, #16
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	f107 0014 	add.w	r0, r7, #20
 8002742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	b004      	add	sp, #16
 8002752:	4770      	bx	lr

08002754 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002764:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002768:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002788:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800278c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	b29b      	uxth	r3, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	4013      	ands	r3, r2
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027cc:	b084      	sub	sp, #16
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	f107 0014 	add.w	r0, r7, #20
 80027da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	b004      	add	sp, #16
 800280a:	4770      	bx	lr

0800280c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800280c:	b480      	push	{r7}
 800280e:	b09b      	sub	sp, #108	; 0x6c
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	78db      	ldrb	r3, [r3, #3]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d81f      	bhi.n	800287e <USB_ActivateEndpoint+0x72>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <USB_ActivateEndpoint+0x38>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002855 	.word	0x08002855
 8002848:	08002871 	.word	0x08002871
 800284c:	08002887 	.word	0x08002887
 8002850:	08002863 	.word	0x08002863
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002854:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002860:	e012      	b.n	8002888 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002862:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002866:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800286a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800286e:	e00b      	b.n	8002888 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002870:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002878:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800287c:	e004      	b.n	8002888 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002884:	e000      	b.n	8002888 <USB_ActivateEndpoint+0x7c>
      break;
 8002886:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800289e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	441a      	add	r2, r3
 80028d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80028dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	7b1b      	ldrb	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 8149 	bne.w	8002b8c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	785b      	ldrb	r3, [r3, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8084 	beq.w	8002a0c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4413      	add	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	011a      	lsls	r2, r3, #4
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	88db      	ldrh	r3, [r3, #6]
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	81fb      	strh	r3, [r7, #14]
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01b      	beq.n	8002988 <USB_ActivateEndpoint+0x17c>
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	81bb      	strh	r3, [r7, #12]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	89bb      	ldrh	r3, [r7, #12]
 8002974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002984:	b29b      	uxth	r3, r3
 8002986:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d020      	beq.n	80029d2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a6:	813b      	strh	r3, [r7, #8]
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	f083 0320 	eor.w	r3, r3, #32
 80029ae:	813b      	strh	r3, [r7, #8]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	893b      	ldrh	r3, [r7, #8]
 80029bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8013      	strh	r3, [r2, #0]
 80029d0:	e27f      	b.n	8002ed2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	897b      	ldrh	r3, [r7, #10]
 80029f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8013      	strh	r3, [r2, #0]
 8002a0a:	e262      	b.n	8002ed2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	011a      	lsls	r2, r3, #4
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	88db      	ldrh	r3, [r3, #6]
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	4413      	add	r3, r2
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	011a      	lsls	r2, r3, #4
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d112      	bne.n	8002a92 <USB_ActivateEndpoint+0x286>
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	e02f      	b.n	8002af2 <USB_ActivateEndpoint+0x2e6>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b3e      	cmp	r3, #62	; 0x3e
 8002a98:	d813      	bhi.n	8002ac2 <USB_ActivateEndpoint+0x2b6>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <USB_ActivateEndpoint+0x2a8>
 8002aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	029b      	lsls	r3, r3, #10
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	e017      	b.n	8002af2 <USB_ActivateEndpoint+0x2e6>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <USB_ActivateEndpoint+0x2d0>
 8002ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	663b      	str	r3, [r7, #96]	; 0x60
 8002adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	029b      	lsls	r3, r3, #10
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	83fb      	strh	r3, [r7, #30]
 8002b00:	8bfb      	ldrh	r3, [r7, #30]
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01b      	beq.n	8002b42 <USB_ActivateEndpoint+0x336>
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b20:	83bb      	strh	r3, [r7, #28]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	441a      	add	r2, r3
 8002b2c:	8bbb      	ldrh	r3, [r7, #28]
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	837b      	strh	r3, [r7, #26]
 8002b5a:	8b7b      	ldrh	r3, [r7, #26]
 8002b5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b60:	837b      	strh	r3, [r7, #26]
 8002b62:	8b7b      	ldrh	r3, [r7, #26]
 8002b64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b68:	837b      	strh	r3, [r7, #26]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	441a      	add	r2, r3
 8002b74:	8b7b      	ldrh	r3, [r7, #26]
 8002b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8013      	strh	r3, [r2, #0]
 8002b8a:	e1a2      	b.n	8002ed2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	441a      	add	r2, r3
 8002bb0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bbc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd8:	4413      	add	r3, r2
 8002bda:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	011a      	lsls	r2, r3, #4
 8002be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bea:	657b      	str	r3, [r7, #84]	; 0x54
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	891b      	ldrh	r3, [r3, #8]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfa:	801a      	strh	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0c:	4413      	add	r3, r2
 8002c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	011a      	lsls	r2, r3, #4
 8002c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	895b      	ldrh	r3, [r3, #10]
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	785b      	ldrb	r3, [r3, #1]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f040 8091 	bne.w	8002d5c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002c48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01b      	beq.n	8002c8a <USB_ActivateEndpoint+0x47e>
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	441a      	add	r2, r3
 8002c74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	873b      	strh	r3, [r7, #56]	; 0x38
 8002c98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01b      	beq.n	8002cda <USB_ActivateEndpoint+0x4ce>
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002cf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002cf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002cf8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002cfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002cfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	441a      	add	r2, r3
 8002d0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d38:	867b      	strh	r3, [r7, #50]	; 0x32
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
 8002d5a:	e0ba      	b.n	8002ed2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01d      	beq.n	8002db4 <USB_ActivateEndpoint+0x5a8>
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	441a      	add	r2, r3
 8002d9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002dc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01d      	beq.n	8002e0c <USB_ActivateEndpoint+0x600>
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	78db      	ldrb	r3, [r3, #3]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d024      	beq.n	8002e5e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002e2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e32:	f083 0320 	eor.w	r3, r3, #32
 8002e36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]
 8002e5c:	e01d      	b.n	8002e9a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002ed2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	376c      	adds	r7, #108	; 0x6c
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b08d      	sub	sp, #52	; 0x34
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	7b1b      	ldrb	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 808e 	bne.w	8003010 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d044      	beq.n	8002f86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	81bb      	strh	r3, [r7, #12]
 8002f0a:	89bb      	ldrh	r3, [r7, #12]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01b      	beq.n	8002f4c <USB_DeactivateEndpoint+0x6c>
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	817b      	strh	r3, [r7, #10]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f62:	813b      	strh	r3, [r7, #8]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	893b      	ldrh	r3, [r7, #8]
 8002f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8013      	strh	r3, [r2, #0]
 8002f84:	e192      	b.n	80032ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	827b      	strh	r3, [r7, #18]
 8002f94:	8a7b      	ldrh	r3, [r7, #18]
 8002f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01b      	beq.n	8002fd6 <USB_DeactivateEndpoint+0xf6>
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	823b      	strh	r3, [r7, #16]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	441a      	add	r2, r3
 8002fc0:	8a3b      	ldrh	r3, [r7, #16]
 8002fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fec:	81fb      	strh	r3, [r7, #14]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
 800300e:	e14d      	b.n	80032ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 80a5 	bne.w	8003164 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	843b      	strh	r3, [r7, #32]
 8003028:	8c3b      	ldrh	r3, [r7, #32]
 800302a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01b      	beq.n	800306a <USB_DeactivateEndpoint+0x18a>
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	83fb      	strh	r3, [r7, #30]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	441a      	add	r2, r3
 8003054:	8bfb      	ldrh	r3, [r7, #30]
 8003056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800305a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800305e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003066:	b29b      	uxth	r3, r3
 8003068:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	83bb      	strh	r3, [r7, #28]
 8003078:	8bbb      	ldrh	r3, [r7, #28]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01b      	beq.n	80030ba <USB_DeactivateEndpoint+0x1da>
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003098:	837b      	strh	r3, [r7, #26]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	8b7b      	ldrh	r3, [r7, #26]
 80030a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d0:	833b      	strh	r3, [r7, #24]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	441a      	add	r2, r3
 80030dc:	8b3b      	ldrh	r3, [r7, #24]
 80030de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003108:	82fb      	strh	r3, [r7, #22]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	441a      	add	r2, r3
 8003114:	8afb      	ldrh	r3, [r7, #22]
 8003116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003126:	b29b      	uxth	r3, r3
 8003128:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003140:	82bb      	strh	r3, [r7, #20]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	8abb      	ldrh	r3, [r7, #20]
 800314e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315e:	b29b      	uxth	r3, r3
 8003160:	8013      	strh	r3, [r2, #0]
 8003162:	e0a3      	b.n	80032ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <USB_DeactivateEndpoint+0x2d4>
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80031c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01b      	beq.n	8003204 <USB_DeactivateEndpoint+0x324>
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003200:	b29b      	uxth	r3, r3
 8003202:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003252:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003270:	b29b      	uxth	r3, r3
 8003272:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	847b      	strh	r3, [r7, #34]	; 0x22
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800329c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3734      	adds	r7, #52	; 0x34
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b0c4      	sub	sp, #272	; 0x110
 80032bc:	af00      	add	r7, sp, #0
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	6018      	str	r0, [r3, #0]
 80032c2:	463b      	mov	r3, r7
 80032c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032c6:	463b      	mov	r3, r7
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 8557 	bne.w	8003d80 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80032d2:	463b      	mov	r3, r7
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	463b      	mov	r3, r7
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d905      	bls.n	80032ee <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80032e2:	463b      	mov	r3, r7
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80032ec:	e004      	b.n	80032f8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80032ee:	463b      	mov	r3, r7
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80032f8:	463b      	mov	r3, r7
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	7b1b      	ldrb	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d12c      	bne.n	800335c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003302:	463b      	mov	r3, r7
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6959      	ldr	r1, [r3, #20]
 8003308:	463b      	mov	r3, r7
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	88da      	ldrh	r2, [r3, #6]
 800330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003312:	b29b      	uxth	r3, r3
 8003314:	1d38      	adds	r0, r7, #4
 8003316:	6800      	ldr	r0, [r0, #0]
 8003318:	f001 fa2c 	bl	8004774 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4413      	add	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	463b      	mov	r3, r7
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	011a      	lsls	r2, r3, #4
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4413      	add	r3, r2
 8003340:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003344:	f107 0310 	add.w	r3, r7, #16
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334e:	b29a      	uxth	r2, r3
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	f000 bcdd 	b.w	8003d16 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800335c:	463b      	mov	r3, r7
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	78db      	ldrb	r3, [r3, #3]
 8003362:	2b02      	cmp	r3, #2
 8003364:	f040 8347 	bne.w	80039f6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003368:	463b      	mov	r3, r7
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	463b      	mov	r3, r7
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	429a      	cmp	r2, r3
 8003376:	f240 82eb 	bls.w	8003950 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	463b      	mov	r3, r7
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003394:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	463b      	mov	r3, r7
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80033aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80033b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80033be:	463b      	mov	r3, r7
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c8:	1ad2      	subs	r2, r2, r3
 80033ca:	463b      	mov	r3, r7
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	463b      	mov	r3, r7
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8159 	beq.w	800369e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
 80033f2:	463b      	mov	r3, r7
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d164      	bne.n	80034c6 <USB_EPStartXfer+0x20e>
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	4413      	add	r3, r2
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003414:	463b      	mov	r3, r7
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	011a      	lsls	r2, r3, #4
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	4413      	add	r3, r2
 8003420:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d112      	bne.n	8003454 <USB_EPStartXfer+0x19c>
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003438:	b29a      	uxth	r2, r3
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344c:	b29a      	uxth	r2, r3
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	e054      	b.n	80034fe <USB_EPStartXfer+0x246>
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003458:	2b3e      	cmp	r3, #62	; 0x3e
 800345a:	d817      	bhi.n	800348c <USB_EPStartXfer+0x1d4>
 800345c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <USB_EPStartXfer+0x1c4>
 8003472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003476:	3301      	adds	r3, #1
 8003478:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800347c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003480:	b29b      	uxth	r3, r3
 8003482:	029b      	lsls	r3, r3, #10
 8003484:	b29a      	uxth	r2, r3
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e038      	b.n	80034fe <USB_EPStartXfer+0x246>
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <USB_EPStartXfer+0x1f4>
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034be:	b29a      	uxth	r2, r3
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	e01b      	b.n	80034fe <USB_EPStartXfer+0x246>
 80034c6:	463b      	mov	r3, r7
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	785b      	ldrb	r3, [r3, #1]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d116      	bne.n	80034fe <USB_EPStartXfer+0x246>
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d8:	b29b      	uxth	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	4413      	add	r3, r2
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	463b      	mov	r3, r7
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	011a      	lsls	r2, r3, #4
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	4413      	add	r3, r2
 80034ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
 80034f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80034fe:	463b      	mov	r3, r7
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	895b      	ldrh	r3, [r3, #10]
 8003504:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003508:	463b      	mov	r3, r7
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003512:	b29b      	uxth	r3, r3
 8003514:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003518:	1d38      	adds	r0, r7, #4
 800351a:	6800      	ldr	r0, [r0, #0]
 800351c:	f001 f92a 	bl	8004774 <USB_WritePMA>
            ep->xfer_buff += len;
 8003520:	463b      	mov	r3, r7
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352a:	441a      	add	r2, r3
 800352c:	463b      	mov	r3, r7
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003532:	463b      	mov	r3, r7
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	463b      	mov	r3, r7
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d909      	bls.n	8003556 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003542:	463b      	mov	r3, r7
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354c:	1ad2      	subs	r2, r2, r3
 800354e:	463b      	mov	r3, r7
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	621a      	str	r2, [r3, #32]
 8003554:	e008      	b.n	8003568 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003556:	463b      	mov	r3, r7
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003560:	463b      	mov	r3, r7
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003568:	463b      	mov	r3, r7
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	785b      	ldrb	r3, [r3, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d164      	bne.n	800363c <USB_EPStartXfer+0x384>
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003580:	b29b      	uxth	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	463b      	mov	r3, r7
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	011a      	lsls	r2, r3, #4
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d112      	bne.n	80035ca <USB_EPStartXfer+0x312>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	e057      	b.n	800367a <USB_EPStartXfer+0x3c2>
 80035ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ce:	2b3e      	cmp	r3, #62	; 0x3e
 80035d0:	d817      	bhi.n	8003602 <USB_EPStartXfer+0x34a>
 80035d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <USB_EPStartXfer+0x33a>
 80035e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035ec:	3301      	adds	r3, #1
 80035ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	029b      	lsls	r3, r3, #10
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e03b      	b.n	800367a <USB_EPStartXfer+0x3c2>
 8003602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800360c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <USB_EPStartXfer+0x36a>
 8003618:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800361c:	3b01      	subs	r3, #1
 800361e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003622:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003626:	b29b      	uxth	r3, r3
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	b29b      	uxth	r3, r3
 800362c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003634:	b29a      	uxth	r2, r3
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	e01e      	b.n	800367a <USB_EPStartXfer+0x3c2>
 800363c:	463b      	mov	r3, r7
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d119      	bne.n	800367a <USB_EPStartXfer+0x3c2>
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	4413      	add	r3, r2
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	463b      	mov	r3, r7
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	011a      	lsls	r2, r3, #4
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	4413      	add	r3, r2
 800366a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	b29a      	uxth	r2, r3
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800367a:	463b      	mov	r3, r7
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	891b      	ldrh	r3, [r3, #8]
 8003680:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003684:	463b      	mov	r3, r7
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6959      	ldr	r1, [r3, #20]
 800368a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368e:	b29b      	uxth	r3, r3
 8003690:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003694:	1d38      	adds	r0, r7, #4
 8003696:	6800      	ldr	r0, [r0, #0]
 8003698:	f001 f86c 	bl	8004774 <USB_WritePMA>
 800369c:	e33b      	b.n	8003d16 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800369e:	463b      	mov	r3, r7
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d164      	bne.n	8003772 <USB_EPStartXfer+0x4ba>
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036bc:	4413      	add	r3, r2
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c0:	463b      	mov	r3, r7
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	011a      	lsls	r2, r3, #4
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80036d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d112      	bne.n	8003700 <USB_EPStartXfer+0x448>
 80036da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	e057      	b.n	80037b0 <USB_EPStartXfer+0x4f8>
 8003700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003704:	2b3e      	cmp	r3, #62	; 0x3e
 8003706:	d817      	bhi.n	8003738 <USB_EPStartXfer+0x480>
 8003708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <USB_EPStartXfer+0x470>
 800371e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003722:	3301      	adds	r3, #1
 8003724:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372c:	b29b      	uxth	r3, r3
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	b29a      	uxth	r2, r3
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e03b      	b.n	80037b0 <USB_EPStartXfer+0x4f8>
 8003738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <USB_EPStartXfer+0x4a0>
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003752:	3b01      	subs	r3, #1
 8003754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375c:	b29b      	uxth	r3, r3
 800375e:	029b      	lsls	r3, r3, #10
 8003760:	b29b      	uxth	r3, r3
 8003762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376a:	b29a      	uxth	r2, r3
 800376c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800376e:	801a      	strh	r2, [r3, #0]
 8003770:	e01e      	b.n	80037b0 <USB_EPStartXfer+0x4f8>
 8003772:	463b      	mov	r3, r7
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d119      	bne.n	80037b0 <USB_EPStartXfer+0x4f8>
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	657b      	str	r3, [r7, #84]	; 0x54
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003790:	4413      	add	r3, r2
 8003792:	657b      	str	r3, [r7, #84]	; 0x54
 8003794:	463b      	mov	r3, r7
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	011a      	lsls	r2, r3, #4
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	4413      	add	r3, r2
 80037a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
 80037a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80037b0:	463b      	mov	r3, r7
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	891b      	ldrh	r3, [r3, #8]
 80037b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037ba:	463b      	mov	r3, r7
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6959      	ldr	r1, [r3, #20]
 80037c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80037ca:	1d38      	adds	r0, r7, #4
 80037cc:	6800      	ldr	r0, [r0, #0]
 80037ce:	f000 ffd1 	bl	8004774 <USB_WritePMA>
            ep->xfer_buff += len;
 80037d2:	463b      	mov	r3, r7
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037dc:	441a      	add	r2, r3
 80037de:	463b      	mov	r3, r7
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80037e4:	463b      	mov	r3, r7
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	463b      	mov	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d909      	bls.n	8003808 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80037f4:	463b      	mov	r3, r7
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	463b      	mov	r3, r7
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	621a      	str	r2, [r3, #32]
 8003806:	e008      	b.n	800381a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003808:	463b      	mov	r3, r7
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003812:	463b      	mov	r3, r7
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
 8003820:	463b      	mov	r3, r7
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d164      	bne.n	80038f4 <USB_EPStartXfer+0x63c>
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383e:	4413      	add	r3, r2
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003842:	463b      	mov	r3, r7
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	011a      	lsls	r2, r3, #4
 800384a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384c:	4413      	add	r3, r2
 800384e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003852:	63bb      	str	r3, [r7, #56]	; 0x38
 8003854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d112      	bne.n	8003882 <USB_EPStartXfer+0x5ca>
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003866:	b29a      	uxth	r2, r3
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	801a      	strh	r2, [r3, #0]
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387a:	b29a      	uxth	r2, r3
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	e054      	b.n	800392c <USB_EPStartXfer+0x674>
 8003882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003886:	2b3e      	cmp	r3, #62	; 0x3e
 8003888:	d817      	bhi.n	80038ba <USB_EPStartXfer+0x602>
 800388a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <USB_EPStartXfer+0x5f2>
 80038a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	029b      	lsls	r3, r3, #10
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e038      	b.n	800392c <USB_EPStartXfer+0x674>
 80038ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <USB_EPStartXfer+0x622>
 80038d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038d4:	3b01      	subs	r3, #1
 80038d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038de:	b29b      	uxth	r3, r3
 80038e0:	029b      	lsls	r3, r3, #10
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	e01b      	b.n	800392c <USB_EPStartXfer+0x674>
 80038f4:	463b      	mov	r3, r7
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d116      	bne.n	800392c <USB_EPStartXfer+0x674>
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390c:	4413      	add	r3, r2
 800390e:	647b      	str	r3, [r7, #68]	; 0x44
 8003910:	463b      	mov	r3, r7
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	011a      	lsls	r2, r3, #4
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	4413      	add	r3, r2
 800391c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
 8003922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003926:	b29a      	uxth	r2, r3
 8003928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800392c:	463b      	mov	r3, r7
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	895b      	ldrh	r3, [r3, #10]
 8003932:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003936:	463b      	mov	r3, r7
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6959      	ldr	r1, [r3, #20]
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003940:	b29b      	uxth	r3, r3
 8003942:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003946:	1d38      	adds	r0, r7, #4
 8003948:	6800      	ldr	r0, [r0, #0]
 800394a:	f000 ff13 	bl	8004774 <USB_WritePMA>
 800394e:	e1e2      	b.n	8003d16 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003950:	463b      	mov	r3, r7
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003974:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	463b      	mov	r3, r7
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800398a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800398e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399a:	b29b      	uxth	r3, r3
 800399c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	663b      	str	r3, [r7, #96]	; 0x60
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039b2:	4413      	add	r3, r2
 80039b4:	663b      	str	r3, [r7, #96]	; 0x60
 80039b6:	463b      	mov	r3, r7
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	011a      	lsls	r2, r3, #4
 80039be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c0:	4413      	add	r3, r2
 80039c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80039d2:	463b      	mov	r3, r7
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	891b      	ldrh	r3, [r3, #8]
 80039d8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039dc:	463b      	mov	r3, r7
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6959      	ldr	r1, [r3, #20]
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80039ec:	1d38      	adds	r0, r7, #4
 80039ee:	6800      	ldr	r0, [r0, #0]
 80039f0:	f000 fec0 	bl	8004774 <USB_WritePMA>
 80039f4:	e18f      	b.n	8003d16 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	463b      	mov	r3, r7
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 808f 	beq.w	8003b30 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a18:	463b      	mov	r3, r7
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	785b      	ldrb	r3, [r3, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d164      	bne.n	8003aec <USB_EPStartXfer+0x834>
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	673b      	str	r3, [r7, #112]	; 0x70
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a36:	4413      	add	r3, r2
 8003a38:	673b      	str	r3, [r7, #112]	; 0x70
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	011a      	lsls	r2, r3, #4
 8003a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a44:	4413      	add	r3, r2
 8003a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d112      	bne.n	8003a7a <USB_EPStartXfer+0x7c2>
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	e054      	b.n	8003b24 <USB_EPStartXfer+0x86c>
 8003a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003a80:	d817      	bhi.n	8003ab2 <USB_EPStartXfer+0x7fa>
 8003a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <USB_EPStartXfer+0x7ea>
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	e038      	b.n	8003b24 <USB_EPStartXfer+0x86c>
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <USB_EPStartXfer+0x81a>
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	3b01      	subs	r3, #1
 8003ace:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	029b      	lsls	r3, r3, #10
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	801a      	strh	r2, [r3, #0]
 8003aea:	e01b      	b.n	8003b24 <USB_EPStartXfer+0x86c>
 8003aec:	463b      	mov	r3, r7
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d116      	bne.n	8003b24 <USB_EPStartXfer+0x86c>
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b04:	4413      	add	r3, r2
 8003b06:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b08:	463b      	mov	r3, r7
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	011a      	lsls	r2, r3, #4
 8003b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b18:	677b      	str	r3, [r7, #116]	; 0x74
 8003b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003b24:	463b      	mov	r3, r7
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	895b      	ldrh	r3, [r3, #10]
 8003b2a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003b2e:	e097      	b.n	8003c60 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b30:	463b      	mov	r3, r7
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d168      	bne.n	8003c0c <USB_EPStartXfer+0x954>
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b52:	4413      	add	r3, r2
 8003b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b58:	463b      	mov	r3, r7
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	011a      	lsls	r2, r3, #4
 8003b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d112      	bne.n	8003b9a <USB_EPStartXfer+0x8e2>
 8003b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	e05d      	b.n	8003c56 <USB_EPStartXfer+0x99e>
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003ba0:	d817      	bhi.n	8003bd2 <USB_EPStartXfer+0x91a>
 8003ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <USB_EPStartXfer+0x90a>
 8003bb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	e041      	b.n	8003c56 <USB_EPStartXfer+0x99e>
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <USB_EPStartXfer+0x93a>
 8003be8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bec:	3b01      	subs	r3, #1
 8003bee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e024      	b.n	8003c56 <USB_EPStartXfer+0x99e>
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d11f      	bne.n	8003c56 <USB_EPStartXfer+0x99e>
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c2e:	4413      	add	r3, r2
 8003c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c34:	463b      	mov	r3, r7
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	011a      	lsls	r2, r3, #4
 8003c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c40:	4413      	add	r3, r2
 8003c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003c56:	463b      	mov	r3, r7
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	891b      	ldrh	r3, [r3, #8]
 8003c5c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c60:	463b      	mov	r3, r7
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6959      	ldr	r1, [r3, #20]
 8003c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c70:	1d38      	adds	r0, r7, #4
 8003c72:	6800      	ldr	r0, [r0, #0]
 8003c74:	f000 fd7e 	bl	8004774 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003c78:	463b      	mov	r3, r7
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d122      	bne.n	8003cc8 <USB_EPStartXfer+0xa10>
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	463b      	mov	r3, r7
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	441a      	add	r2, r3
 8003cae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8013      	strh	r3, [r2, #0]
 8003cc6:	e026      	b.n	8003d16 <USB_EPStartXfer+0xa5e>
 8003cc8:	463b      	mov	r3, r7
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d121      	bne.n	8003d16 <USB_EPStartXfer+0xa5e>
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	441a      	add	r2, r3
 8003cfe:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	463b      	mov	r3, r7
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f107 020e 	add.w	r2, r7, #14
 8003d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d34:	8013      	strh	r3, [r2, #0]
 8003d36:	f107 030e 	add.w	r3, r7, #14
 8003d3a:	f107 020e 	add.w	r2, r7, #14
 8003d3e:	8812      	ldrh	r2, [r2, #0]
 8003d40:	f082 0210 	eor.w	r2, r2, #16
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	f107 030e 	add.w	r3, r7, #14
 8003d4a:	f107 020e 	add.w	r2, r7, #14
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	f082 0220 	eor.w	r2, r2, #32
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	f107 030e 	add.w	r3, r7, #14
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8013      	strh	r3, [r2, #0]
 8003d7e:	e3b5      	b.n	80044ec <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003d80:	463b      	mov	r3, r7
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	7b1b      	ldrb	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8090 	bne.w	8003eac <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	463b      	mov	r3, r7
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d90e      	bls.n	8003dba <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8003da6:	463b      	mov	r3, r7
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db0:	1ad2      	subs	r2, r2, r3
 8003db2:	463b      	mov	r3, r7
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	619a      	str	r2, [r3, #24]
 8003db8:	e008      	b.n	8003dcc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8003dba:	463b      	mov	r3, r7
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003de4:	4413      	add	r3, r2
 8003de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dea:	463b      	mov	r3, r7
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <USB_EPStartXfer+0xb7e>
 8003e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e32c      	b.n	8004490 <USB_EPStartXfer+0x11d8>
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e3c:	d818      	bhi.n	8003e70 <USB_EPStartXfer+0xbb8>
 8003e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <USB_EPStartXfer+0xba6>
 8003e54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	029b      	lsls	r3, r3, #10
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	e30f      	b.n	8004490 <USB_EPStartXfer+0x11d8>
 8003e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <USB_EPStartXfer+0xbd8>
 8003e86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	029b      	lsls	r3, r3, #10
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	e2f1      	b.n	8004490 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003eac:	463b      	mov	r3, r7
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	f040 818f 	bne.w	80041d6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003eb8:	463b      	mov	r3, r7
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d175      	bne.n	8003fae <USB_EPStartXfer+0xcf6>
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eda:	4413      	add	r3, r2
 8003edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	011a      	lsls	r2, r3, #4
 8003ee8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eec:	4413      	add	r3, r2
 8003eee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d116      	bne.n	8003f2e <USB_EPStartXfer+0xc76>
 8003f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	e065      	b.n	8003ffa <USB_EPStartXfer+0xd42>
 8003f2e:	463b      	mov	r3, r7
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b3e      	cmp	r3, #62	; 0x3e
 8003f36:	d81a      	bhi.n	8003f6e <USB_EPStartXfer+0xcb6>
 8003f38:	463b      	mov	r3, r7
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f44:	463b      	mov	r3, r7
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <USB_EPStartXfer+0xca4>
 8003f52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f56:	3301      	adds	r3, #1
 8003f58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	029b      	lsls	r3, r3, #10
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e045      	b.n	8003ffa <USB_EPStartXfer+0xd42>
 8003f6e:	463b      	mov	r3, r7
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <USB_EPStartXfer+0xcda>
 8003f88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	029b      	lsls	r3, r3, #10
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	e025      	b.n	8003ffa <USB_EPStartXfer+0xd42>
 8003fae:	463b      	mov	r3, r7
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d120      	bne.n	8003ffa <USB_EPStartXfer+0xd42>
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	011a      	lsls	r2, r3, #4
 8003fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fec:	463b      	mov	r3, r7
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004002:	463b      	mov	r3, r7
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d175      	bne.n	80040f8 <USB_EPStartXfer+0xe40>
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004024:	4413      	add	r3, r2
 8004026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800402a:	463b      	mov	r3, r7
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	011a      	lsls	r2, r3, #4
 8004032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004036:	4413      	add	r3, r2
 8004038:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800403c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d116      	bne.n	8004078 <USB_EPStartXfer+0xdc0>
 800404a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004056:	b29a      	uxth	r2, r3
 8004058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800406a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406e:	b29a      	uxth	r2, r3
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	e061      	b.n	800413c <USB_EPStartXfer+0xe84>
 8004078:	463b      	mov	r3, r7
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b3e      	cmp	r3, #62	; 0x3e
 8004080:	d81a      	bhi.n	80040b8 <USB_EPStartXfer+0xe00>
 8004082:	463b      	mov	r3, r7
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800408e:	463b      	mov	r3, r7
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <USB_EPStartXfer+0xdee>
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	3301      	adds	r3, #1
 80040a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	029b      	lsls	r3, r3, #10
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	e041      	b.n	800413c <USB_EPStartXfer+0xe84>
 80040b8:	463b      	mov	r3, r7
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040c4:	463b      	mov	r3, r7
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <USB_EPStartXfer+0xe24>
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d6:	3b01      	subs	r3, #1
 80040d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	029b      	lsls	r3, r3, #10
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	e021      	b.n	800413c <USB_EPStartXfer+0xe84>
 80040f8:	463b      	mov	r3, r7
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d11c      	bne.n	800413c <USB_EPStartXfer+0xe84>
 8004102:	1d3b      	adds	r3, r7, #4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004112:	4413      	add	r3, r2
 8004114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004118:	463b      	mov	r3, r7
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	011a      	lsls	r2, r3, #4
 8004120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004124:	4413      	add	r3, r2
 8004126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800412e:	463b      	mov	r3, r7
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	b29a      	uxth	r2, r3
 8004136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800413a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800413c:	463b      	mov	r3, r7
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 81a4 	beq.w	8004490 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	463b      	mov	r3, r7
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800415c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <USB_EPStartXfer+0xebc>
 8004168:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004174:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8187 	bne.w	8004490 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004182:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 8180 	bne.w	8004490 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	463b      	mov	r3, r7
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	463b      	mov	r3, r7
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]
 80041d4:	e15c      	b.n	8004490 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80041d6:	463b      	mov	r3, r7
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	78db      	ldrb	r3, [r3, #3]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	f040 8155 	bne.w	800448c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	463b      	mov	r3, r7
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d90e      	bls.n	8004210 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80041f2:	463b      	mov	r3, r7
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80041fc:	463b      	mov	r3, r7
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	463b      	mov	r3, r7
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	619a      	str	r2, [r3, #24]
 800420e:	e008      	b.n	8004222 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004210:	463b      	mov	r3, r7
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004222:	463b      	mov	r3, r7
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d16f      	bne.n	800430c <USB_EPStartXfer+0x1054>
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423c:	b29b      	uxth	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004244:	4413      	add	r3, r2
 8004246:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800424a:	463b      	mov	r3, r7
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004256:	4413      	add	r3, r2
 8004258:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800425c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <USB_EPStartXfer+0xfde>
 8004268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004274:	b29a      	uxth	r2, r3
 8004276:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428c:	b29a      	uxth	r2, r3
 800428e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	e05f      	b.n	8004356 <USB_EPStartXfer+0x109e>
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429a:	2b3e      	cmp	r3, #62	; 0x3e
 800429c:	d818      	bhi.n	80042d0 <USB_EPStartXfer+0x1018>
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <USB_EPStartXfer+0x1006>
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b8:	3301      	adds	r3, #1
 80042ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	029b      	lsls	r3, r3, #10
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	e042      	b.n	8004356 <USB_EPStartXfer+0x109e>
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <USB_EPStartXfer+0x1038>
 80042e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ea:	3b01      	subs	r3, #1
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004302:	b29a      	uxth	r2, r3
 8004304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	e024      	b.n	8004356 <USB_EPStartXfer+0x109e>
 800430c:	463b      	mov	r3, r7
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d11f      	bne.n	8004356 <USB_EPStartXfer+0x109e>
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800432e:	4413      	add	r3, r2
 8004330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004334:	463b      	mov	r3, r7
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	011a      	lsls	r2, r3, #4
 800433c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004340:	4413      	add	r3, r2
 8004342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800434a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434e:	b29a      	uxth	r2, r3
 8004350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800435e:	463b      	mov	r3, r7
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d16f      	bne.n	8004448 <USB_EPStartXfer+0x1190>
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004378:	b29b      	uxth	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004380:	4413      	add	r3, r2
 8004382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004386:	463b      	mov	r3, r7
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	011a      	lsls	r2, r3, #4
 800438e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004392:	4413      	add	r3, r2
 8004394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <USB_EPStartXfer+0x111a>
 80043a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	e05e      	b.n	8004490 <USB_EPStartXfer+0x11d8>
 80043d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d6:	2b3e      	cmp	r3, #62	; 0x3e
 80043d8:	d818      	bhi.n	800440c <USB_EPStartXfer+0x1154>
 80043da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <USB_EPStartXfer+0x1142>
 80043f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f4:	3301      	adds	r3, #1
 80043f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fe:	b29b      	uxth	r3, r3
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	b29a      	uxth	r2, r3
 8004404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	e041      	b.n	8004490 <USB_EPStartXfer+0x11d8>
 800440c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2b00      	cmp	r3, #0
 8004420:	d104      	bne.n	800442c <USB_EPStartXfer+0x1174>
 8004422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004426:	3b01      	subs	r3, #1
 8004428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800442c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004430:	b29b      	uxth	r3, r3
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	b29b      	uxth	r3, r3
 8004436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443e:	b29a      	uxth	r2, r3
 8004440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e023      	b.n	8004490 <USB_EPStartXfer+0x11d8>
 8004448:	463b      	mov	r3, r7
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d11e      	bne.n	8004490 <USB_EPStartXfer+0x11d8>
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004462:	4413      	add	r3, r2
 8004464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004468:	463b      	mov	r3, r7
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	011a      	lsls	r2, r3, #4
 8004470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004474:	4413      	add	r3, r2
 8004476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800447a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800447e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004482:	b29a      	uxth	r2, r3
 8004484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	e001      	b.n	8004490 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e02e      	b.n	80044ee <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	463b      	mov	r3, r7
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80044ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80044b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80044ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80044be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	463b      	mov	r3, r7
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d020      	beq.n	800454c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004520:	81bb      	strh	r3, [r7, #12]
 8004522:	89bb      	ldrh	r3, [r7, #12]
 8004524:	f083 0310 	eor.w	r3, r3, #16
 8004528:	81bb      	strh	r3, [r7, #12]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	441a      	add	r2, r3
 8004534:	89bb      	ldrh	r3, [r7, #12]
 8004536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]
 800454a:	e01f      	b.n	800458c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	81fb      	strh	r3, [r7, #14]
 8004564:	89fb      	ldrh	r3, [r7, #14]
 8004566:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800456a:	81fb      	strh	r3, [r7, #14]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	b29b      	uxth	r3, r3
 800458a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	7b1b      	ldrb	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 809d 	bne.w	80046e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d04c      	beq.n	800464e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	823b      	strh	r3, [r7, #16]
 80045c2:	8a3b      	ldrh	r3, [r7, #16]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01b      	beq.n	8004604 <USB_EPClearStall+0x6c>
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	81fb      	strh	r3, [r7, #14]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	78db      	ldrb	r3, [r3, #3]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d06c      	beq.n	80046e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004622:	81bb      	strh	r3, [r7, #12]
 8004624:	89bb      	ldrh	r3, [r7, #12]
 8004626:	f083 0320 	eor.w	r3, r3, #32
 800462a:	81bb      	strh	r3, [r7, #12]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	89bb      	ldrh	r3, [r7, #12]
 8004638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004648:	b29b      	uxth	r3, r3
 800464a:	8013      	strh	r3, [r2, #0]
 800464c:	e04b      	b.n	80046e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	82fb      	strh	r3, [r7, #22]
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <USB_EPClearStall+0x106>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	82bb      	strh	r3, [r7, #20]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8abb      	ldrh	r3, [r7, #20]
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	827b      	strh	r3, [r7, #18]
 80046b6:	8a7b      	ldrh	r3, [r7, #18]
 80046b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046bc:	827b      	strh	r3, [r7, #18]
 80046be:	8a7b      	ldrh	r3, [r7, #18]
 80046c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046c4:	827b      	strh	r3, [r7, #18]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	8a7b      	ldrh	r3, [r7, #18]
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800474e:	b29b      	uxth	r3, r3
 8004750:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004774:	b480      	push	{r7}
 8004776:	b08d      	sub	sp, #52	; 0x34
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4611      	mov	r1, r2
 8004780:	461a      	mov	r2, r3
 8004782:	460b      	mov	r3, r1
 8004784:	80fb      	strh	r3, [r7, #6]
 8004786:	4613      	mov	r3, r2
 8004788:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800478a:	88bb      	ldrh	r3, [r7, #4]
 800478c:	3301      	adds	r3, #1
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	005a      	lsls	r2, r3, #1
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ac:	e01e      	b.n	80047ec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	3301      	adds	r3, #1
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	3302      	adds	r3, #2
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	3302      	adds	r3, #2
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	3301      	adds	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	3b01      	subs	r3, #1
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1dd      	bne.n	80047ae <USB_WritePMA+0x3a>
  }
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	3734      	adds	r7, #52	; 0x34
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80047fe:	b480      	push	{r7}
 8004800:	b08b      	sub	sp, #44	; 0x2c
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4611      	mov	r1, r2
 800480a:	461a      	mov	r2, r3
 800480c:	460b      	mov	r3, r1
 800480e:	80fb      	strh	r3, [r7, #6]
 8004810:	4613      	mov	r3, r2
 8004812:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004814:	88bb      	ldrh	r3, [r7, #4]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	b29b      	uxth	r3, r3
 800481a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	005a      	lsls	r2, r3, #1
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004830:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	e01b      	b.n	8004870 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	3302      	adds	r3, #2
 8004844:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	b2da      	uxtb	r2, r3
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	3302      	adds	r3, #2
 8004868:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	3b01      	subs	r3, #1
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e0      	bne.n	8004838 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004876:	88bb      	ldrh	r3, [r7, #4]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	701a      	strb	r2, [r3, #0]
  }
}
 8004892:	bf00      	nop
 8004894:	372c      	adds	r7, #44	; 0x2c
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	7c1b      	ldrb	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d115      	bne.n	80048e0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048b8:	2202      	movs	r2, #2
 80048ba:	2181      	movs	r1, #129	; 0x81
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fe8e 	bl	80065de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80048c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048cc:	2202      	movs	r2, #2
 80048ce:	2101      	movs	r1, #1
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 fe84 	bl	80065de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80048de:	e012      	b.n	8004906 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048e0:	2340      	movs	r3, #64	; 0x40
 80048e2:	2202      	movs	r2, #2
 80048e4:	2181      	movs	r1, #129	; 0x81
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f001 fe79 	bl	80065de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80048f2:	2340      	movs	r3, #64	; 0x40
 80048f4:	2202      	movs	r2, #2
 80048f6:	2101      	movs	r1, #1
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 fe70 	bl	80065de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004906:	2308      	movs	r3, #8
 8004908:	2203      	movs	r2, #3
 800490a:	2182      	movs	r1, #130	; 0x82
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f001 fe66 	bl	80065de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004918:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800491c:	f001 ff86 	bl	800682c <USBD_static_malloc>
 8004920:	4602      	mov	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e026      	b.n	8004986 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800493e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2200      	movs	r2, #0
 800494e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7c1b      	ldrb	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800496c:	2101      	movs	r1, #1
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 ff26 	bl	80067c0 <USBD_LL_PrepareReceive>
 8004974:	e007      	b.n	8004986 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	2101      	movs	r1, #1
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f001 ff1d 	bl	80067c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80049a0:	2181      	movs	r1, #129	; 0x81
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f001 fe41 	bl	800662a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80049ae:	2101      	movs	r1, #1
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 fe3a 	bl	800662a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80049be:	2182      	movs	r1, #130	; 0x82
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f001 fe32 	bl	800662a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00e      	beq.n	80049f4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 ff2c 	bl	8006844 <USBD_static_free>
    pdev->pClassData = NULL;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b086      	sub	sp, #24
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a0e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d039      	beq.n	8004a9c <USBD_CDC_Setup+0x9e>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d17f      	bne.n	8004b2c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	88db      	ldrh	r3, [r3, #6]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d029      	beq.n	8004a88 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b25b      	sxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da11      	bge.n	8004a62 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004a4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	88d2      	ldrh	r2, [r2, #6]
 8004a50:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004a52:	6939      	ldr	r1, [r7, #16]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	88db      	ldrh	r3, [r3, #6]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f001 fa09 	bl	8005e72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004a60:	e06b      	b.n	8004b3a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	785a      	ldrb	r2, [r3, #1]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	88db      	ldrh	r3, [r3, #6]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004a78:	6939      	ldr	r1, [r7, #16]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	88db      	ldrh	r3, [r3, #6]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f001 fa24 	bl	8005ece <USBD_CtlPrepareRx>
      break;
 8004a86:	e058      	b.n	8004b3a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	7850      	ldrb	r0, [r2, #1]
 8004a94:	2200      	movs	r2, #0
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	4798      	blx	r3
      break;
 8004a9a:	e04e      	b.n	8004b3a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b0b      	cmp	r3, #11
 8004aa2:	d02e      	beq.n	8004b02 <USBD_CDC_Setup+0x104>
 8004aa4:	2b0b      	cmp	r3, #11
 8004aa6:	dc38      	bgt.n	8004b1a <USBD_CDC_Setup+0x11c>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <USBD_CDC_Setup+0xb4>
 8004aac:	2b0a      	cmp	r3, #10
 8004aae:	d014      	beq.n	8004ada <USBD_CDC_Setup+0xdc>
 8004ab0:	e033      	b.n	8004b1a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d107      	bne.n	8004acc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004abc:	f107 030c 	add.w	r3, r7, #12
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f001 f9d4 	bl	8005e72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004aca:	e02e      	b.n	8004b2a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 f965 	bl	8005d9e <USBD_CtlError>
            ret = USBD_FAIL;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	75fb      	strb	r3, [r7, #23]
          break;
 8004ad8:	e027      	b.n	8004b2a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d107      	bne.n	8004af4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ae4:	f107 030f 	add.w	r3, r7, #15
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f001 f9c0 	bl	8005e72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004af2:	e01a      	b.n	8004b2a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f951 	bl	8005d9e <USBD_CtlError>
            ret = USBD_FAIL;
 8004afc:	2302      	movs	r3, #2
 8004afe:	75fb      	strb	r3, [r7, #23]
          break;
 8004b00:	e013      	b.n	8004b2a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d00d      	beq.n	8004b28 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8004b0c:	6839      	ldr	r1, [r7, #0]
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 f945 	bl	8005d9e <USBD_CtlError>
            ret = USBD_FAIL;
 8004b14:	2302      	movs	r3, #2
 8004b16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b18:	e006      	b.n	8004b28 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 f93e 	bl	8005d9e <USBD_CtlError>
          ret = USBD_FAIL;
 8004b22:	2302      	movs	r3, #2
 8004b24:	75fb      	strb	r3, [r7, #23]
          break;
 8004b26:	e000      	b.n	8004b2a <USBD_CDC_Setup+0x12c>
          break;
 8004b28:	bf00      	nop
      }
      break;
 8004b2a:	e006      	b.n	8004b3a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 f935 	bl	8005d9e <USBD_CtlError>
      ret = USBD_FAIL;
 8004b34:	2302      	movs	r3, #2
 8004b36:	75fb      	strb	r3, [r7, #23]
      break;
 8004b38:	bf00      	nop
  }

  return ret;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b56:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b5e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d03a      	beq.n	8004be0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	331c      	adds	r3, #28
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d029      	beq.n	8004bd4 <USBD_CDC_DataIn+0x90>
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	331c      	adds	r3, #28
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	78f9      	ldrb	r1, [r7, #3]
 8004b94:	68b8      	ldr	r0, [r7, #8]
 8004b96:	460b      	mov	r3, r1
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4403      	add	r3, r0
 8004ba0:	3338      	adds	r3, #56	; 0x38
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ba8:	fb03 f301 	mul.w	r3, r3, r1
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d110      	bne.n	8004bd4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	331c      	adds	r3, #28
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004bc6:	78f9      	ldrb	r1, [r7, #3]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2200      	movs	r2, #0
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 fdd4 	bl	800677a <USBD_LL_Transmit>
 8004bd2:	e003      	b.n	8004bdc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f001 fdff 	bl	8006806 <USBD_LL_GetRxDataSize>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00d      	beq.n	8004c36 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4798      	blx	r3

    return USBD_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	e000      	b.n	8004c38 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004c36:	2302      	movs	r3, #2
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c4e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d015      	beq.n	8004c86 <USBD_CDC_EP0_RxReady+0x46>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c60:	2bff      	cmp	r3, #255	; 0xff
 8004c62:	d010      	beq.n	8004c86 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004c72:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2243      	movs	r2, #67	; 0x43
 8004c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004c9e:	4b03      	ldr	r3, [pc, #12]	; (8004cac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	200000a4 	.word	0x200000a4

08004cb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2243      	movs	r2, #67	; 0x43
 8004cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004cbe:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000060 	.word	0x20000060

08004cd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2243      	movs	r2, #67	; 0x43
 8004cdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004cde:	4b03      	ldr	r3, [pc, #12]	; (8004cec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	200000e8 	.word	0x200000e8

08004cf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	220a      	movs	r2, #10
 8004cfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004cfe:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	2000001c 	.word	0x2000001c

08004d10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d50:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d7e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01c      	beq.n	8004de8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d115      	bne.n	8004de4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2181      	movs	r1, #129	; 0x81
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 fccd 	bl	800677a <USBD_LL_Transmit>

      return USBD_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e002      	b.n	8004dea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d017      	beq.n	8004e3c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7c1b      	ldrb	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e1e:	2101      	movs	r1, #1
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 fccd 	bl	80067c0 <USBD_LL_PrepareReceive>
 8004e26:	e007      	b.n	8004e38 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e2e:	2340      	movs	r3, #64	; 0x40
 8004e30:	2101      	movs	r1, #1
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fcc4 	bl	80067c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	4613      	mov	r3, r2
 8004e52:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e01a      	b.n	8004e94 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	79fa      	ldrb	r2, [r7, #7]
 8004e8a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f001 fb31 	bl	80064f4 <USBD_LL_Init>

  return USBD_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e001      	b.n	8004ec2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 fb66 	bl	80065a8 <USBD_LL_Start>

  return USBD_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f06:	2302      	movs	r3, #2
 8004f08:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	4611      	mov	r1, r2
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3

  return USBD_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fed8 	bl	8005d26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f84:	461a      	mov	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d016      	beq.n	8004fc8 <USBD_LL_SetupStage+0x6a>
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d81c      	bhi.n	8004fd8 <USBD_LL_SetupStage+0x7a>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <USBD_LL_SetupStage+0x4a>
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d008      	beq.n	8004fb8 <USBD_LL_SetupStage+0x5a>
 8004fa6:	e017      	b.n	8004fd8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9cb 	bl	800534c <USBD_StdDevReq>
      break;
 8004fb6:	e01a      	b.n	8004fee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa2d 	bl	8005420 <USBD_StdItfReq>
      break;
 8004fc6:	e012      	b.n	8004fee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fa6d 	bl	80054b0 <USBD_StdEPReq>
      break;
 8004fd6:	e00a      	b.n	8004fee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 fb3e 	bl	8006668 <USBD_LL_StallEP>
      break;
 8004fec:	bf00      	nop
  }

  return USBD_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	460b      	mov	r3, r1
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d14b      	bne.n	80050a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005012:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800501a:	2b03      	cmp	r3, #3
 800501c:	d134      	bne.n	8005088 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d919      	bls.n	800505e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005040:	429a      	cmp	r2, r3
 8005042:	d203      	bcs.n	800504c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005048:	b29b      	uxth	r3, r3
 800504a:	e002      	b.n	8005052 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005050:	b29b      	uxth	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 ff57 	bl	8005f0a <USBD_CtlContinueRx>
 800505c:	e038      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005070:	2b03      	cmp	r3, #3
 8005072:	d105      	bne.n	8005080 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 ff54 	bl	8005f2e <USBD_CtlSendStatus>
 8005086:	e023      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800508e:	2b05      	cmp	r3, #5
 8005090:	d11e      	bne.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800509a:	2100      	movs	r1, #0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f001 fae3 	bl	8006668 <USBD_LL_StallEP>
 80050a2:	e015      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00d      	beq.n	80050cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d108      	bne.n	80050cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	7afa      	ldrb	r2, [r7, #11]
 80050c4:	4611      	mov	r1, r2
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	4798      	blx	r3
 80050ca:	e001      	b.n	80050d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80050cc:	2302      	movs	r3, #2
 80050ce:	e000      	b.n	80050d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	460b      	mov	r3, r1
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d17f      	bne.n	80051ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3314      	adds	r3, #20
 80050f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d15c      	bne.n	80051b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d915      	bls.n	8005136 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	b29b      	uxth	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fec1 	bl	8005eaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005128:	2300      	movs	r3, #0
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 fb46 	bl	80067c0 <USBD_LL_PrepareReceive>
 8005134:	e04e      	b.n	80051d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	6912      	ldr	r2, [r2, #16]
 800513e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005142:	fb02 f201 	mul.w	r2, r2, r1
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11c      	bne.n	8005186 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005154:	429a      	cmp	r2, r3
 8005156:	d316      	bcc.n	8005186 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005162:	429a      	cmp	r2, r3
 8005164:	d20f      	bcs.n	8005186 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fe9d 	bl	8005eaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005178:	2300      	movs	r3, #0
 800517a:	2200      	movs	r2, #0
 800517c:	2100      	movs	r1, #0
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f001 fb1e 	bl	80067c0 <USBD_LL_PrepareReceive>
 8005184:	e026      	b.n	80051d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005198:	2b03      	cmp	r3, #3
 800519a:	d105      	bne.n	80051a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f001 fa5c 	bl	8006668 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fecf 	bl	8005f54 <USBD_CtlReceiveStatus>
 80051b6:	e00d      	b.n	80051d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d004      	beq.n	80051cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f001 fa4a 	bl	8006668 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d11d      	bne.n	800521a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fe81 	bl	8004ee6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051ec:	e015      	b.n	800521a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005200:	2b03      	cmp	r3, #3
 8005202:	d108      	bne.n	8005216 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	7afa      	ldrb	r2, [r7, #11]
 800520e:	4611      	mov	r1, r2
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	4798      	blx	r3
 8005214:	e001      	b.n	800521a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005216:	2302      	movs	r3, #2
 8005218:	e000      	b.n	800521c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800522c:	2340      	movs	r3, #64	; 0x40
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 f9d3 	bl	80065de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2240      	movs	r2, #64	; 0x40
 8005244:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f001 f9c5 	bl	80065de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2240      	movs	r2, #64	; 0x40
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6852      	ldr	r2, [r2, #4]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	4611      	mov	r1, r2
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
  }

  return USBD_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d105      	bne.n	800530a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005324:	2b03      	cmp	r3, #3
 8005326:	d10b      	bne.n	8005340 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d005      	beq.n	8005372 <USBD_StdDevReq+0x26>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d84f      	bhi.n	800540a <USBD_StdDevReq+0xbe>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <USBD_StdDevReq+0x36>
 800536e:	2b20      	cmp	r3, #32
 8005370:	d14b      	bne.n	800540a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
      break;
 8005380:	e048      	b.n	8005414 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	2b09      	cmp	r3, #9
 8005388:	d839      	bhi.n	80053fe <USBD_StdDevReq+0xb2>
 800538a:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <USBD_StdDevReq+0x44>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053e1 	.word	0x080053e1
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053ff 	.word	0x080053ff
 800539c:	080053eb 	.word	0x080053eb
 80053a0:	080053ff 	.word	0x080053ff
 80053a4:	080053c3 	.word	0x080053c3
 80053a8:	080053b9 	.word	0x080053b9
 80053ac:	080053ff 	.word	0x080053ff
 80053b0:	080053d7 	.word	0x080053d7
 80053b4:	080053cd 	.word	0x080053cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f9dc 	bl	8005778 <USBD_GetDescriptor>
          break;
 80053c0:	e022      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fb3f 	bl	8005a48 <USBD_SetAddress>
          break;
 80053ca:	e01d      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb7e 	bl	8005ad0 <USBD_SetConfig>
          break;
 80053d4:	e018      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fc07 	bl	8005bec <USBD_GetConfig>
          break;
 80053de:	e013      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fc37 	bl	8005c56 <USBD_GetStatus>
          break;
 80053e8:	e00e      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fc65 	bl	8005cbc <USBD_SetFeature>
          break;
 80053f2:	e009      	b.n	8005408 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fc74 	bl	8005ce4 <USBD_ClrFeature>
          break;
 80053fc:	e004      	b.n	8005408 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fccc 	bl	8005d9e <USBD_CtlError>
          break;
 8005406:	bf00      	nop
      }
      break;
 8005408:	e004      	b.n	8005414 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fcc6 	bl	8005d9e <USBD_CtlError>
      break;
 8005412:	bf00      	nop
  }

  return ret;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop

08005420 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d005      	beq.n	8005446 <USBD_StdItfReq+0x26>
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d82e      	bhi.n	800549c <USBD_StdItfReq+0x7c>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <USBD_StdItfReq+0x26>
 8005442:	2b20      	cmp	r3, #32
 8005444:	d12a      	bne.n	800549c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544c:	3b01      	subs	r3, #1
 800544e:	2b02      	cmp	r3, #2
 8005450:	d81d      	bhi.n	800548e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	889b      	ldrh	r3, [r3, #4]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d813      	bhi.n	8005484 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
 800546a:	4603      	mov	r3, r0
 800546c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	88db      	ldrh	r3, [r3, #6]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d110      	bne.n	8005498 <USBD_StdItfReq+0x78>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10d      	bne.n	8005498 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fd56 	bl	8005f2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005482:	e009      	b.n	8005498 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fc89 	bl	8005d9e <USBD_CtlError>
          break;
 800548c:	e004      	b.n	8005498 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800548e:	6839      	ldr	r1, [r7, #0]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fc84 	bl	8005d9e <USBD_CtlError>
          break;
 8005496:	e000      	b.n	800549a <USBD_StdItfReq+0x7a>
          break;
 8005498:	bf00      	nop
      }
      break;
 800549a:	e004      	b.n	80054a6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fc7d 	bl	8005d9e <USBD_CtlError>
      break;
 80054a4:	bf00      	nop
  }

  return USBD_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	889b      	ldrh	r3, [r3, #4]
 80054c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d007      	beq.n	80054e0 <USBD_StdEPReq+0x30>
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	f200 8146 	bhi.w	8005762 <USBD_StdEPReq+0x2b2>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <USBD_StdEPReq+0x40>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	f040 8141 	bne.w	8005762 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
      break;
 80054ee:	e13d      	b.n	800576c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d10a      	bne.n	8005512 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
 800550a:	4603      	mov	r3, r0
 800550c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	e12d      	b.n	800576e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d007      	beq.n	800552a <USBD_StdEPReq+0x7a>
 800551a:	2b03      	cmp	r3, #3
 800551c:	f300 811b 	bgt.w	8005756 <USBD_StdEPReq+0x2a6>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d072      	beq.n	800560a <USBD_StdEPReq+0x15a>
 8005524:	2b01      	cmp	r3, #1
 8005526:	d03a      	beq.n	800559e <USBD_StdEPReq+0xee>
 8005528:	e115      	b.n	8005756 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005530:	2b02      	cmp	r3, #2
 8005532:	d002      	beq.n	800553a <USBD_StdEPReq+0x8a>
 8005534:	2b03      	cmp	r3, #3
 8005536:	d015      	beq.n	8005564 <USBD_StdEPReq+0xb4>
 8005538:	e02b      	b.n	8005592 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800553a:	7bbb      	ldrb	r3, [r7, #14]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <USBD_StdEPReq+0xaa>
 8005540:	7bbb      	ldrb	r3, [r7, #14]
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d009      	beq.n	800555a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 f88c 	bl	8006668 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005550:	2180      	movs	r1, #128	; 0x80
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 f888 	bl	8006668 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005558:	e020      	b.n	800559c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fc1e 	bl	8005d9e <USBD_CtlError>
              break;
 8005562:	e01b      	b.n	800559c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	885b      	ldrh	r3, [r3, #2]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10e      	bne.n	800558a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <USBD_StdEPReq+0xda>
 8005572:	7bbb      	ldrb	r3, [r7, #14]
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d008      	beq.n	800558a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	88db      	ldrh	r3, [r3, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005580:	7bbb      	ldrb	r3, [r7, #14]
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 f86f 	bl	8006668 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fccf 	bl	8005f2e <USBD_CtlSendStatus>

              break;
 8005590:	e004      	b.n	800559c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fc02 	bl	8005d9e <USBD_CtlError>
              break;
 800559a:	bf00      	nop
          }
          break;
 800559c:	e0e0      	b.n	8005760 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d002      	beq.n	80055ae <USBD_StdEPReq+0xfe>
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d015      	beq.n	80055d8 <USBD_StdEPReq+0x128>
 80055ac:	e026      	b.n	80055fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00c      	beq.n	80055ce <USBD_StdEPReq+0x11e>
 80055b4:	7bbb      	ldrb	r3, [r7, #14]
 80055b6:	2b80      	cmp	r3, #128	; 0x80
 80055b8:	d009      	beq.n	80055ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f852 	bl	8006668 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 f84e 	bl	8006668 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80055cc:	e01c      	b.n	8005608 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fbe4 	bl	8005d9e <USBD_CtlError>
              break;
 80055d6:	e017      	b.n	8005608 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	885b      	ldrh	r3, [r3, #2]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d112      	bne.n	8005606 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80055e0:	7bbb      	ldrb	r3, [r7, #14]
 80055e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80055ea:	7bbb      	ldrb	r3, [r7, #14]
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 f859 	bl	80066a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fc9a 	bl	8005f2e <USBD_CtlSendStatus>
              }
              break;
 80055fa:	e004      	b.n	8005606 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fbcd 	bl	8005d9e <USBD_CtlError>
              break;
 8005604:	e000      	b.n	8005608 <USBD_StdEPReq+0x158>
              break;
 8005606:	bf00      	nop
          }
          break;
 8005608:	e0aa      	b.n	8005760 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005610:	2b02      	cmp	r3, #2
 8005612:	d002      	beq.n	800561a <USBD_StdEPReq+0x16a>
 8005614:	2b03      	cmp	r3, #3
 8005616:	d032      	beq.n	800567e <USBD_StdEPReq+0x1ce>
 8005618:	e097      	b.n	800574a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800561a:	7bbb      	ldrb	r3, [r7, #14]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <USBD_StdEPReq+0x180>
 8005620:	7bbb      	ldrb	r3, [r7, #14]
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d004      	beq.n	8005630 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fbb8 	bl	8005d9e <USBD_CtlError>
                break;
 800562e:	e091      	b.n	8005754 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005634:	2b00      	cmp	r3, #0
 8005636:	da0b      	bge.n	8005650 <USBD_StdEPReq+0x1a0>
 8005638:	7bbb      	ldrb	r3, [r7, #14]
 800563a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	3310      	adds	r3, #16
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4413      	add	r3, r2
 800564c:	3304      	adds	r3, #4
 800564e:	e00b      	b.n	8005668 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	3304      	adds	r3, #4
 8005668:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2202      	movs	r2, #2
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fbfb 	bl	8005e72 <USBD_CtlSendData>
              break;
 800567c:	e06a      	b.n	8005754 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800567e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005682:	2b00      	cmp	r3, #0
 8005684:	da11      	bge.n	80056aa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	f003 020f 	and.w	r2, r3, #15
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	3318      	adds	r3, #24
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d117      	bne.n	80056d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fb7b 	bl	8005d9e <USBD_CtlError>
                  break;
 80056a8:	e054      	b.n	8005754 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	f003 020f 	and.w	r2, r3, #15
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fb68 	bl	8005d9e <USBD_CtlError>
                  break;
 80056ce:	e041      	b.n	8005754 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	da0b      	bge.n	80056f0 <USBD_StdEPReq+0x240>
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	3310      	adds	r3, #16
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	3304      	adds	r3, #4
 80056ee:	e00b      	b.n	8005708 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4413      	add	r3, r2
 8005706:	3304      	adds	r3, #4
 8005708:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800570a:	7bbb      	ldrb	r3, [r7, #14]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <USBD_StdEPReq+0x266>
 8005710:	7bbb      	ldrb	r3, [r7, #14]
 8005712:	2b80      	cmp	r3, #128	; 0x80
 8005714:	d103      	bne.n	800571e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e00e      	b.n	800573c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800571e:	7bbb      	ldrb	r3, [r7, #14]
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 ffde 	bl	80066e4 <USBD_LL_IsStallEP>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e002      	b.n	800573c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2202      	movs	r2, #2
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb95 	bl	8005e72 <USBD_CtlSendData>
              break;
 8005748:	e004      	b.n	8005754 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb26 	bl	8005d9e <USBD_CtlError>
              break;
 8005752:	bf00      	nop
          }
          break;
 8005754:	e004      	b.n	8005760 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb20 	bl	8005d9e <USBD_CtlError>
          break;
 800575e:	bf00      	nop
      }
      break;
 8005760:	e004      	b.n	800576c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fb1a 	bl	8005d9e <USBD_CtlError>
      break;
 800576a:	bf00      	nop
  }

  return ret;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	885b      	ldrh	r3, [r3, #2]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	2b06      	cmp	r3, #6
 800579a:	f200 8128 	bhi.w	80059ee <USBD_GetDescriptor+0x276>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <USBD_GetDescriptor+0x2c>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057c1 	.word	0x080057c1
 80057a8:	080057d9 	.word	0x080057d9
 80057ac:	08005819 	.word	0x08005819
 80057b0:	080059ef 	.word	0x080059ef
 80057b4:	080059ef 	.word	0x080059ef
 80057b8:	0800598f 	.word	0x0800598f
 80057bc:	080059bb 	.word	0x080059bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	7c12      	ldrb	r2, [r2, #16]
 80057cc:	f107 0108 	add.w	r1, r7, #8
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
 80057d4:	60f8      	str	r0, [r7, #12]
      break;
 80057d6:	e112      	b.n	80059fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7c1b      	ldrb	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10d      	bne.n	80057fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	f107 0208 	add.w	r2, r7, #8
 80057ec:	4610      	mov	r0, r2
 80057ee:	4798      	blx	r3
 80057f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3301      	adds	r3, #1
 80057f6:	2202      	movs	r2, #2
 80057f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80057fa:	e100      	b.n	80059fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	f107 0208 	add.w	r2, r7, #8
 8005808:	4610      	mov	r0, r2
 800580a:	4798      	blx	r3
 800580c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3301      	adds	r3, #1
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
      break;
 8005816:	e0f2      	b.n	80059fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	885b      	ldrh	r3, [r3, #2]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b05      	cmp	r3, #5
 8005820:	f200 80ac 	bhi.w	800597c <USBD_GetDescriptor+0x204>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USBD_GetDescriptor+0xb4>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005845 	.word	0x08005845
 8005830:	08005879 	.word	0x08005879
 8005834:	080058ad 	.word	0x080058ad
 8005838:	080058e1 	.word	0x080058e1
 800583c:	08005915 	.word	0x08005915
 8005840:	08005949 	.word	0x08005949
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	7c12      	ldrb	r2, [r2, #16]
 800585c:	f107 0108 	add.w	r1, r7, #8
 8005860:	4610      	mov	r0, r2
 8005862:	4798      	blx	r3
 8005864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005866:	e091      	b.n	800598c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa97 	bl	8005d9e <USBD_CtlError>
            err++;
 8005870:	7afb      	ldrb	r3, [r7, #11]
 8005872:	3301      	adds	r3, #1
 8005874:	72fb      	strb	r3, [r7, #11]
          break;
 8005876:	e089      	b.n	800598c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	7c12      	ldrb	r2, [r2, #16]
 8005890:	f107 0108 	add.w	r1, r7, #8
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
 8005898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800589a:	e077      	b.n	800598c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa7d 	bl	8005d9e <USBD_CtlError>
            err++;
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	3301      	adds	r3, #1
 80058a8:	72fb      	strb	r3, [r7, #11]
          break;
 80058aa:	e06f      	b.n	800598c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	7c12      	ldrb	r2, [r2, #16]
 80058c4:	f107 0108 	add.w	r1, r7, #8
 80058c8:	4610      	mov	r0, r2
 80058ca:	4798      	blx	r3
 80058cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058ce:	e05d      	b.n	800598c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fa63 	bl	8005d9e <USBD_CtlError>
            err++;
 80058d8:	7afb      	ldrb	r3, [r7, #11]
 80058da:	3301      	adds	r3, #1
 80058dc:	72fb      	strb	r3, [r7, #11]
          break;
 80058de:	e055      	b.n	800598c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	7c12      	ldrb	r2, [r2, #16]
 80058f8:	f107 0108 	add.w	r1, r7, #8
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
 8005900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005902:	e043      	b.n	800598c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa49 	bl	8005d9e <USBD_CtlError>
            err++;
 800590c:	7afb      	ldrb	r3, [r7, #11]
 800590e:	3301      	adds	r3, #1
 8005910:	72fb      	strb	r3, [r7, #11]
          break;
 8005912:	e03b      	b.n	800598c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	7c12      	ldrb	r2, [r2, #16]
 800592c:	f107 0108 	add.w	r1, r7, #8
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
 8005934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005936:	e029      	b.n	800598c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa2f 	bl	8005d9e <USBD_CtlError>
            err++;
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	3301      	adds	r3, #1
 8005944:	72fb      	strb	r3, [r7, #11]
          break;
 8005946:	e021      	b.n	800598c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	7c12      	ldrb	r2, [r2, #16]
 8005960:	f107 0108 	add.w	r1, r7, #8
 8005964:	4610      	mov	r0, r2
 8005966:	4798      	blx	r3
 8005968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800596a:	e00f      	b.n	800598c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa15 	bl	8005d9e <USBD_CtlError>
            err++;
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	3301      	adds	r3, #1
 8005978:	72fb      	strb	r3, [r7, #11]
          break;
 800597a:	e007      	b.n	800598c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa0d 	bl	8005d9e <USBD_CtlError>
          err++;
 8005984:	7afb      	ldrb	r3, [r7, #11]
 8005986:	3301      	adds	r3, #1
 8005988:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800598a:	e038      	b.n	80059fe <USBD_GetDescriptor+0x286>
 800598c:	e037      	b.n	80059fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7c1b      	ldrb	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599e:	f107 0208 	add.w	r2, r7, #8
 80059a2:	4610      	mov	r0, r2
 80059a4:	4798      	blx	r3
 80059a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059a8:	e029      	b.n	80059fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f9f6 	bl	8005d9e <USBD_CtlError>
        err++;
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	3301      	adds	r3, #1
 80059b6:	72fb      	strb	r3, [r7, #11]
      break;
 80059b8:	e021      	b.n	80059fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	7c1b      	ldrb	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f107 0208 	add.w	r2, r7, #8
 80059ce:	4610      	mov	r0, r2
 80059d0:	4798      	blx	r3
 80059d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	2207      	movs	r2, #7
 80059da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059dc:	e00f      	b.n	80059fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f9dc 	bl	8005d9e <USBD_CtlError>
        err++;
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	3301      	adds	r3, #1
 80059ea:	72fb      	strb	r3, [r7, #11]
      break;
 80059ec:	e007      	b.n	80059fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f9d4 	bl	8005d9e <USBD_CtlError>
      err++;
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	3301      	adds	r3, #1
 80059fa:	72fb      	strb	r3, [r7, #11]
      break;
 80059fc:	bf00      	nop
  }

  if (err != 0U)
 80059fe:	7afb      	ldrb	r3, [r7, #11]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11c      	bne.n	8005a3e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005a04:	893b      	ldrh	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d011      	beq.n	8005a2e <USBD_GetDescriptor+0x2b6>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	88db      	ldrh	r3, [r3, #6]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	88da      	ldrh	r2, [r3, #6]
 8005a16:	893b      	ldrh	r3, [r7, #8]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	bf28      	it	cs
 8005a1c:	4613      	movcs	r3, r2
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a22:	893b      	ldrh	r3, [r7, #8]
 8005a24:	461a      	mov	r2, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa22 	bl	8005e72 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	88db      	ldrh	r3, [r3, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa79 	bl	8005f2e <USBD_CtlSendStatus>
 8005a3c:	e000      	b.n	8005a40 <USBD_GetDescriptor+0x2c8>
    return;
 8005a3e:	bf00      	nop
    }
  }
}
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop

08005a48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	889b      	ldrh	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d130      	bne.n	8005abc <USBD_SetAddress+0x74>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	88db      	ldrh	r3, [r3, #6]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d12c      	bne.n	8005abc <USBD_SetAddress+0x74>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	885b      	ldrh	r3, [r3, #2]
 8005a66:	2b7f      	cmp	r3, #127	; 0x7f
 8005a68:	d828      	bhi.n	8005abc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	885b      	ldrh	r3, [r3, #2]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d104      	bne.n	8005a8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f98b 	bl	8005d9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a88:	e01d      	b.n	8005ac6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fe50 	bl	800673c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fa46 	bl	8005f2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab0:	e009      	b.n	8005ac6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aba:	e004      	b.n	8005ac6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f96d 	bl	8005d9e <USBD_CtlError>
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	885b      	ldrh	r3, [r3, #2]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	4b41      	ldr	r3, [pc, #260]	; (8005be8 <USBD_SetConfig+0x118>)
 8005ae2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ae4:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <USBD_SetConfig+0x118>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d904      	bls.n	8005af6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f955 	bl	8005d9e <USBD_CtlError>
 8005af4:	e075      	b.n	8005be2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d002      	beq.n	8005b06 <USBD_SetConfig+0x36>
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d023      	beq.n	8005b4c <USBD_SetConfig+0x7c>
 8005b04:	e062      	b.n	8005bcc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005b06:	4b38      	ldr	r3, [pc, #224]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01a      	beq.n	8005b44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005b0e:	4b36      	ldr	r3, [pc, #216]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005b20:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff f9e7 	bl	8004efa <USBD_SetClassConfig>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d104      	bne.n	8005b3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f932 	bl	8005d9e <USBD_CtlError>
            return;
 8005b3a:	e052      	b.n	8005be2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f9f6 	bl	8005f2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005b42:	e04e      	b.n	8005be2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f9f2 	bl	8005f2e <USBD_CtlSendStatus>
        break;
 8005b4a:	e04a      	b.n	8005be2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005b4c:	4b26      	ldr	r3, [pc, #152]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d112      	bne.n	8005b7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005b5c:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff f9e3 	bl	8004f38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f9db 	bl	8005f2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005b78:	e033      	b.n	8005be2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d01d      	beq.n	8005bc4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff f9d1 	bl	8004f38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <USBD_SetConfig+0x118>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <USBD_SetConfig+0x118>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff f9a7 	bl	8004efa <USBD_SetClassConfig>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d104      	bne.n	8005bbc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f8f2 	bl	8005d9e <USBD_CtlError>
            return;
 8005bba:	e012      	b.n	8005be2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f9b6 	bl	8005f2e <USBD_CtlSendStatus>
        break;
 8005bc2:	e00e      	b.n	8005be2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f9b2 	bl	8005f2e <USBD_CtlSendStatus>
        break;
 8005bca:	e00a      	b.n	8005be2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8e5 	bl	8005d9e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <USBD_SetConfig+0x118>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff f9ac 	bl	8004f38 <USBD_ClrClassConfig>
        break;
 8005be0:	bf00      	nop
    }
  }
}
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200001a8 	.word	0x200001a8

08005bec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	88db      	ldrh	r3, [r3, #6]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d004      	beq.n	8005c08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f8cc 	bl	8005d9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005c06:	e022      	b.n	8005c4e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	dc02      	bgt.n	8005c18 <USBD_GetConfig+0x2c>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dc03      	bgt.n	8005c1e <USBD_GetConfig+0x32>
 8005c16:	e015      	b.n	8005c44 <USBD_GetConfig+0x58>
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d00b      	beq.n	8005c34 <USBD_GetConfig+0x48>
 8005c1c:	e012      	b.n	8005c44 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3308      	adds	r3, #8
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f920 	bl	8005e72 <USBD_CtlSendData>
        break;
 8005c32:	e00c      	b.n	8005c4e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	2201      	movs	r2, #1
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f918 	bl	8005e72 <USBD_CtlSendData>
        break;
 8005c42:	e004      	b.n	8005c4e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8a9 	bl	8005d9e <USBD_CtlError>
        break;
 8005c4c:	bf00      	nop
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c66:	3b01      	subs	r3, #1
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d81e      	bhi.n	8005caa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	88db      	ldrh	r3, [r3, #6]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d004      	beq.n	8005c7e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f891 	bl	8005d9e <USBD_CtlError>
        break;
 8005c7c:	e01a      	b.n	8005cb4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f043 0202 	orr.w	r2, r3, #2
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f8e5 	bl	8005e72 <USBD_CtlSendData>
      break;
 8005ca8:	e004      	b.n	8005cb4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f876 	bl	8005d9e <USBD_CtlError>
      break;
 8005cb2:	bf00      	nop
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	885b      	ldrh	r3, [r3, #2]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d106      	bne.n	8005cdc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f929 	bl	8005f2e <USBD_CtlSendStatus>
  }
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d80b      	bhi.n	8005d12 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	885b      	ldrh	r3, [r3, #2]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10c      	bne.n	8005d1c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f90f 	bl	8005f2e <USBD_CtlSendStatus>
      }
      break;
 8005d10:	e004      	b.n	8005d1c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f842 	bl	8005d9e <USBD_CtlError>
      break;
 8005d1a:	e000      	b.n	8005d1e <USBD_ClrFeature+0x3a>
      break;
 8005d1c:	bf00      	nop
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	785a      	ldrb	r2, [r3, #1]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	3302      	adds	r3, #2
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	3303      	adds	r3, #3
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	3305      	adds	r3, #5
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	4413      	add	r3, r2
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	3306      	adds	r3, #6
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	3307      	adds	r3, #7
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	80da      	strh	r2, [r3, #6]

}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005da8:	2180      	movs	r1, #128	; 0x80
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fc5c 	bl	8006668 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005db0:	2100      	movs	r1, #0
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fc58 	bl	8006668 <USBD_LL_StallEP>
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d032      	beq.n	8005e3c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f834 	bl	8005e44 <USBD_GetLen>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	3301      	adds	r3, #1
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	75fa      	strb	r2, [r7, #23]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	75fa      	strb	r2, [r7, #23]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4413      	add	r3, r2
 8005e08:	2203      	movs	r2, #3
 8005e0a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005e0c:	e012      	b.n	8005e34 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	60fa      	str	r2, [r7, #12]
 8005e14:	7dfa      	ldrb	r2, [r7, #23]
 8005e16:	1c51      	adds	r1, r2, #1
 8005e18:	75f9      	strb	r1, [r7, #23]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	440a      	add	r2, r1
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	75fa      	strb	r2, [r7, #23]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4413      	add	r3, r2
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e8      	bne.n	8005e0e <USBD_GetString+0x4e>
    }
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005e50:	e005      	b.n	8005e5e <USBD_GetLen+0x1a>
  {
    len++;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	3301      	adds	r3, #1
 8005e56:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f5      	bne.n	8005e52 <USBD_GetLen+0xe>
  }

  return len;
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr

08005e72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005e88:	88fa      	ldrh	r2, [r7, #6]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fc6d 	bl	800677a <USBD_LL_Transmit>

  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fc5b 	bl	800677a <USBD_LL_Transmit>

  return USBD_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2203      	movs	r2, #3
 8005ee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	2100      	movs	r1, #0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fc60 	bl	80067c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	4613      	mov	r3, r2
 8005f16:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fc4e 	bl	80067c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2200      	movs	r2, #0
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fc18 	bl	800677a <USBD_LL_Transmit>

  return USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2205      	movs	r2, #5
 8005f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f64:	2300      	movs	r3, #0
 8005f66:	2200      	movs	r2, #0
 8005f68:	2100      	movs	r1, #0
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fc28 	bl	80067c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f80:	2200      	movs	r2, #0
 8005f82:	4912      	ldr	r1, [pc, #72]	; (8005fcc <MX_USB_DEVICE_Init+0x50>)
 8005f84:	4812      	ldr	r0, [pc, #72]	; (8005fd0 <MX_USB_DEVICE_Init+0x54>)
 8005f86:	f7fe ff5e 	bl	8004e46 <USBD_Init>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f90:	f7fa f96e 	bl	8000270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f94:	490f      	ldr	r1, [pc, #60]	; (8005fd4 <MX_USB_DEVICE_Init+0x58>)
 8005f96:	480e      	ldr	r0, [pc, #56]	; (8005fd0 <MX_USB_DEVICE_Init+0x54>)
 8005f98:	f7fe ff80 	bl	8004e9c <USBD_RegisterClass>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005fa2:	f7fa f965 	bl	8000270 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005fa6:	490c      	ldr	r1, [pc, #48]	; (8005fd8 <MX_USB_DEVICE_Init+0x5c>)
 8005fa8:	4809      	ldr	r0, [pc, #36]	; (8005fd0 <MX_USB_DEVICE_Init+0x54>)
 8005faa:	f7fe feb1 	bl	8004d10 <USBD_CDC_RegisterInterface>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005fb4:	f7fa f95c 	bl	8000270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005fb8:	4805      	ldr	r0, [pc, #20]	; (8005fd0 <MX_USB_DEVICE_Init+0x54>)
 8005fba:	f7fe ff88 	bl	8004ece <USBD_Start>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005fc4:	f7fa f954 	bl	8000270 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fc8:	bf00      	nop
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	2000013c 	.word	0x2000013c
 8005fd0:	200003d0 	.word	0x200003d0
 8005fd4:	20000028 	.word	0x20000028
 8005fd8:	2000012c 	.word	0x2000012c

08005fdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4905      	ldr	r1, [pc, #20]	; (8005ff8 <CDC_Init_FS+0x1c>)
 8005fe4:	4805      	ldr	r0, [pc, #20]	; (8005ffc <CDC_Init_FS+0x20>)
 8005fe6:	f7fe fea9 	bl	8004d3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005fea:	4905      	ldr	r1, [pc, #20]	; (8006000 <CDC_Init_FS+0x24>)
 8005fec:	4803      	ldr	r0, [pc, #12]	; (8005ffc <CDC_Init_FS+0x20>)
 8005fee:	f7fe febe 	bl	8004d6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005ff2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000a7c 	.word	0x20000a7c
 8005ffc:	200003d0 	.word	0x200003d0
 8006000:	20000694 	.word	0x20000694

08006004 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800600a:	4618      	mov	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
	...

08006014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
 8006020:	4613      	mov	r3, r2
 8006022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	2b23      	cmp	r3, #35	; 0x23
 8006028:	d84a      	bhi.n	80060c0 <CDC_Control_FS+0xac>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <CDC_Control_FS+0x1c>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	080060c1 	.word	0x080060c1
 8006034:	080060c1 	.word	0x080060c1
 8006038:	080060c1 	.word	0x080060c1
 800603c:	080060c1 	.word	0x080060c1
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c1 	.word	0x080060c1
 8006048:	080060c1 	.word	0x080060c1
 800604c:	080060c1 	.word	0x080060c1
 8006050:	080060c1 	.word	0x080060c1
 8006054:	080060c1 	.word	0x080060c1
 8006058:	080060c1 	.word	0x080060c1
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060c1 	.word	0x080060c1
 8006064:	080060c1 	.word	0x080060c1
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060c1 	.word	0x080060c1
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060c1 	.word	0x080060c1
 8006094:	080060c1 	.word	0x080060c1
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c1 	.word	0x080060c1
 80060a4:	080060c1 	.word	0x080060c1
 80060a8:	080060c1 	.word	0x080060c1
 80060ac:	080060c1 	.word	0x080060c1
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060c1 	.word	0x080060c1
 80060b8:	080060c1 	.word	0x080060c1
 80060bc:	080060c1 	.word	0x080060c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80060c0:	bf00      	nop
  }

  return (USBD_OK);
 80060c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop

080060d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4805      	ldr	r0, [pc, #20]	; (80060f4 <CDC_Receive_FS+0x24>)
 80060de:	f7fe fe46 	bl	8004d6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80060e2:	4804      	ldr	r0, [pc, #16]	; (80060f4 <CDC_Receive_FS+0x24>)
 80060e4:	f7fe fe85 	bl	8004df2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80060e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200003d0 	.word	0x200003d0

080060f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <CDC_Transmit_FS+0x48>)
 800610a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800611a:	2301      	movs	r3, #1
 800611c:	e00b      	b.n	8006136 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800611e:	887b      	ldrh	r3, [r7, #2]
 8006120:	461a      	mov	r2, r3
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4806      	ldr	r0, [pc, #24]	; (8006140 <CDC_Transmit_FS+0x48>)
 8006126:	f7fe fe09 	bl	8004d3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800612a:	4805      	ldr	r0, [pc, #20]	; (8006140 <CDC_Transmit_FS+0x48>)
 800612c:	f7fe fe32 	bl	8004d94 <USBD_CDC_TransmitPacket>
 8006130:	4603      	mov	r3, r0
 8006132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200003d0 	.word	0x200003d0

08006144 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	6039      	str	r1, [r7, #0]
 800614e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2212      	movs	r2, #18
 8006154:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006156:	4b03      	ldr	r3, [pc, #12]	; (8006164 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000158 	.word	0x20000158

08006168 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	6039      	str	r1, [r7, #0]
 8006172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2204      	movs	r2, #4
 8006178:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800617a:	4b03      	ldr	r3, [pc, #12]	; (8006188 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	2000016c 	.word	0x2000016c

0800618c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d105      	bne.n	80061aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	4907      	ldr	r1, [pc, #28]	; (80061c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80061a2:	4808      	ldr	r0, [pc, #32]	; (80061c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80061a4:	f7ff fe0c 	bl	8005dc0 <USBD_GetString>
 80061a8:	e004      	b.n	80061b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	4904      	ldr	r1, [pc, #16]	; (80061c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80061ae:	4805      	ldr	r0, [pc, #20]	; (80061c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80061b0:	f7ff fe06 	bl	8005dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061b4:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000e64 	.word	0x20000e64
 80061c4:	08006944 	.word	0x08006944

080061c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	4904      	ldr	r1, [pc, #16]	; (80061e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80061d8:	4804      	ldr	r0, [pc, #16]	; (80061ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80061da:	f7ff fdf1 	bl	8005dc0 <USBD_GetString>
  return USBD_StrDesc;
 80061de:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000e64 	.word	0x20000e64
 80061ec:	0800695c 	.word	0x0800695c

080061f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	221a      	movs	r2, #26
 8006200:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006202:	f000 f843 	bl	800628c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006206:	4b02      	ldr	r3, [pc, #8]	; (8006210 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000170 	.word	0x20000170

08006214 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	4907      	ldr	r1, [pc, #28]	; (8006248 <USBD_FS_ConfigStrDescriptor+0x34>)
 800622a:	4808      	ldr	r0, [pc, #32]	; (800624c <USBD_FS_ConfigStrDescriptor+0x38>)
 800622c:	f7ff fdc8 	bl	8005dc0 <USBD_GetString>
 8006230:	e004      	b.n	800623c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	4904      	ldr	r1, [pc, #16]	; (8006248 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006236:	4805      	ldr	r0, [pc, #20]	; (800624c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006238:	f7ff fdc2 	bl	8005dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000e64 	.word	0x20000e64
 800624c:	08006970 	.word	0x08006970

08006250 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	4907      	ldr	r1, [pc, #28]	; (8006284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006266:	4808      	ldr	r0, [pc, #32]	; (8006288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006268:	f7ff fdaa 	bl	8005dc0 <USBD_GetString>
 800626c:	e004      	b.n	8006278 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	4904      	ldr	r1, [pc, #16]	; (8006284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006272:	4805      	ldr	r0, [pc, #20]	; (8006288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006274:	f7ff fda4 	bl	8005dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006278:	4b02      	ldr	r3, [pc, #8]	; (8006284 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000e64 	.word	0x20000e64
 8006288:	0800697c 	.word	0x0800697c

0800628c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <Get_SerialNum+0x44>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006298:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <Get_SerialNum+0x48>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <Get_SerialNum+0x4c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80062b2:	2208      	movs	r2, #8
 80062b4:	4909      	ldr	r1, [pc, #36]	; (80062dc <Get_SerialNum+0x50>)
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f814 	bl	80062e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80062bc:	2204      	movs	r2, #4
 80062be:	4908      	ldr	r1, [pc, #32]	; (80062e0 <Get_SerialNum+0x54>)
 80062c0:	68b8      	ldr	r0, [r7, #8]
 80062c2:	f000 f80f 	bl	80062e4 <IntToUnicode>
  }
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	1ffff7e8 	.word	0x1ffff7e8
 80062d4:	1ffff7ec 	.word	0x1ffff7ec
 80062d8:	1ffff7f0 	.word	0x1ffff7f0
 80062dc:	20000172 	.word	0x20000172
 80062e0:	20000182 	.word	0x20000182

080062e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]
 80062fa:	e027      	b.n	800634c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	0f1b      	lsrs	r3, r3, #28
 8006300:	2b09      	cmp	r3, #9
 8006302:	d80b      	bhi.n	800631c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	0f1b      	lsrs	r3, r3, #28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4619      	mov	r1, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	440b      	add	r3, r1
 8006314:	3230      	adds	r2, #48	; 0x30
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e00a      	b.n	8006332 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	0f1b      	lsrs	r3, r3, #28
 8006320:	b2da      	uxtb	r2, r3
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	4619      	mov	r1, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	440b      	add	r3, r1
 800632c:	3237      	adds	r2, #55	; 0x37
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	3301      	adds	r3, #1
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	3301      	adds	r3, #1
 800634a:	75fb      	strb	r3, [r7, #23]
 800634c:	7dfa      	ldrb	r2, [r7, #23]
 800634e:	79fb      	ldrb	r3, [r7, #7]
 8006350:	429a      	cmp	r2, r3
 8006352:	d3d3      	bcc.n	80062fc <IntToUnicode+0x18>
  }
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a11      	ldr	r2, [pc, #68]	; (80063b4 <HAL_PCD_MspInit+0x54>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d11b      	bne.n	80063aa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <HAL_PCD_MspInit+0x58>)
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <HAL_PCD_MspInit+0x58>)
 8006378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800637c:	61d3      	str	r3, [r2, #28]
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <HAL_PCD_MspInit+0x58>)
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800638a:	2200      	movs	r2, #0
 800638c:	2100      	movs	r1, #0
 800638e:	2013      	movs	r0, #19
 8006390:	f7fa f96b 	bl	800066a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8006394:	2013      	movs	r0, #19
 8006396:	f7fa f984 	bl	80006a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800639a:	2200      	movs	r2, #0
 800639c:	2100      	movs	r1, #0
 800639e:	2014      	movs	r0, #20
 80063a0:	f7fa f963 	bl	800066a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80063a4:	2014      	movs	r0, #20
 80063a6:	f7fa f97c 	bl	80006a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40005c00 	.word	0x40005c00
 80063b8:	40021000 	.word	0x40021000

080063bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fdc3 	bl	8004f5e <USBD_LL_SetupStage>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	440b      	add	r3, r1
 8006400:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	4619      	mov	r1, r3
 800640a:	f7fe fdf5 	bl	8004ff8 <USBD_LL_DataOutStage>
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006428:	78fa      	ldrb	r2, [r7, #3]
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	440b      	add	r3, r1
 8006436:	333c      	adds	r3, #60	; 0x3c
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	4619      	mov	r1, r3
 800643e:	f7fe fe4c 	bl	80050da <USBD_LL_DataInStage>
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe ff5c 	bl	8005316 <USBD_LL_SOF>
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d001      	beq.n	800647e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800647a:	f7f9 fef9 	bl	8000270 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006484:	7bfa      	ldrb	r2, [r7, #15]
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe ff0c 	bl	80052a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe fec5 	bl	8005224 <USBD_LL_Reset>
}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe ff06 	bl	80052c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064c0:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <HAL_PCD_SuspendCallback+0x30>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	4a03      	ldr	r2, [pc, #12]	; (80064d4 <HAL_PCD_SuspendCallback+0x30>)
 80064c6:	f043 0306 	orr.w	r3, r3, #6
 80064ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed00 	.word	0xe000ed00

080064d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe ff00 	bl	80052ec <USBD_LL_Resume>
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <USBD_LL_Init+0xac>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a26      	ldr	r2, [pc, #152]	; (80065a0 <USBD_LL_Init+0xac>)
 8006508:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800650c:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <USBD_LL_Init+0xac>)
 800650e:	4a25      	ldr	r2, [pc, #148]	; (80065a4 <USBD_LL_Init+0xb0>)
 8006510:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006512:	4b23      	ldr	r3, [pc, #140]	; (80065a0 <USBD_LL_Init+0xac>)
 8006514:	2208      	movs	r2, #8
 8006516:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006518:	4b21      	ldr	r3, [pc, #132]	; (80065a0 <USBD_LL_Init+0xac>)
 800651a:	2202      	movs	r2, #2
 800651c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800651e:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <USBD_LL_Init+0xac>)
 8006520:	2200      	movs	r2, #0
 8006522:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <USBD_LL_Init+0xac>)
 8006526:	2200      	movs	r2, #0
 8006528:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800652a:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <USBD_LL_Init+0xac>)
 800652c:	2200      	movs	r2, #0
 800652e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006530:	481b      	ldr	r0, [pc, #108]	; (80065a0 <USBD_LL_Init+0xac>)
 8006532:	f7fa f8d0 	bl	80006d6 <HAL_PCD_Init>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800653c:	f7f9 fe98 	bl	8000270 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006546:	2318      	movs	r3, #24
 8006548:	2200      	movs	r2, #0
 800654a:	2100      	movs	r1, #0
 800654c:	f7fb fc12 	bl	8001d74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006556:	2358      	movs	r3, #88	; 0x58
 8006558:	2200      	movs	r2, #0
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	f7fb fc0a 	bl	8001d74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006566:	23c0      	movs	r3, #192	; 0xc0
 8006568:	2200      	movs	r2, #0
 800656a:	2181      	movs	r1, #129	; 0x81
 800656c:	f7fb fc02 	bl	8001d74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006576:	f44f 7388 	mov.w	r3, #272	; 0x110
 800657a:	2200      	movs	r2, #0
 800657c:	2101      	movs	r1, #1
 800657e:	f7fb fbf9 	bl	8001d74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800658c:	2200      	movs	r2, #0
 800658e:	2182      	movs	r1, #130	; 0x82
 8006590:	f7fb fbf0 	bl	8001d74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20001064 	.word	0x20001064
 80065a4:	40005c00 	.word	0x40005c00

080065a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fa f994 	bl	80008ec <HAL_PCD_Start>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f94e 	bl	800686c <USBD_Get_USB_Status>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	4608      	mov	r0, r1
 80065e8:	4611      	mov	r1, r2
 80065ea:	461a      	mov	r2, r3
 80065ec:	4603      	mov	r3, r0
 80065ee:	70fb      	strb	r3, [r7, #3]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70bb      	strb	r3, [r7, #2]
 80065f4:	4613      	mov	r3, r2
 80065f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006606:	78bb      	ldrb	r3, [r7, #2]
 8006608:	883a      	ldrh	r2, [r7, #0]
 800660a:	78f9      	ldrb	r1, [r7, #3]
 800660c:	f7fa fb0e 	bl	8000c2c <HAL_PCD_EP_Open>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f928 	bl	800686c <USBD_Get_USB_Status>
 800661c:	4603      	mov	r3, r0
 800661e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006620:	7bbb      	ldrb	r3, [r7, #14]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f7fa fb55 	bl	8000cf8 <HAL_PCD_EP_Close>
 800664e:	4603      	mov	r3, r0
 8006650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f909 	bl	800686c <USBD_Get_USB_Status>
 800665a:	4603      	mov	r3, r0
 800665c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800665e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f7fa fc15 	bl	8000eb6 <HAL_PCD_EP_SetStall>
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f8ea 	bl	800686c <USBD_Get_USB_Status>
 8006698:	4603      	mov	r3, r0
 800669a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800669c:	7bbb      	ldrb	r3, [r7, #14]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066c0:	78fa      	ldrb	r2, [r7, #3]
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fa fc56 	bl	8000f76 <HAL_PCD_EP_ClrStall>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f8cb 	bl	800686c <USBD_Get_USB_Status>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066da:	7bbb      	ldrb	r3, [r7, #14]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80066f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da0c      	bge.n	800671a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	440b      	add	r3, r1
 8006714:	3302      	adds	r3, #2
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	e00b      	b.n	8006732 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	440b      	add	r3, r1
 800672c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006730:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	4611      	mov	r1, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f7fa fa41 	bl	8000be2 <HAL_PCD_SetAddress>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f880 	bl	800686c <USBD_Get_USB_Status>
 800676c:	4603      	mov	r3, r0
 800676e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006770:	7bbb      	ldrb	r3, [r7, #14]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	461a      	mov	r2, r3
 8006786:	460b      	mov	r3, r1
 8006788:	72fb      	strb	r3, [r7, #11]
 800678a:	4613      	mov	r3, r2
 800678c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800679c:	893b      	ldrh	r3, [r7, #8]
 800679e:	7af9      	ldrb	r1, [r7, #11]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	f7fa fb45 	bl	8000e30 <HAL_PCD_EP_Transmit>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 f85d 	bl	800686c <USBD_Get_USB_Status>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	461a      	mov	r2, r3
 80067cc:	460b      	mov	r3, r1
 80067ce:	72fb      	strb	r3, [r7, #11]
 80067d0:	4613      	mov	r3, r2
 80067d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067e2:	893b      	ldrh	r3, [r7, #8]
 80067e4:	7af9      	ldrb	r1, [r7, #11]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	f7fa face 	bl	8000d88 <HAL_PCD_EP_Receive>
 80067ec:	4603      	mov	r3, r0
 80067ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f83a 	bl	800686c <USBD_Get_USB_Status>
 80067f8:	4603      	mov	r3, r0
 80067fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f7fa faf0 	bl	8000e02 <HAL_PCD_EP_GetRxCount>
 8006822:	4603      	mov	r3, r0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <USBD_static_malloc+0x14>)
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr
 8006840:	200001ac 	.word	0x200001ac

08006844 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]

}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	2b03      	cmp	r3, #3
 800687e:	d817      	bhi.n	80068b0 <USBD_Get_USB_Status+0x44>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <USBD_Get_USB_Status+0x1c>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	08006899 	.word	0x08006899
 800688c:	0800689f 	.word	0x0800689f
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068ab 	.word	0x080068ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
    break;
 800689c:	e00b      	b.n	80068b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800689e:	2302      	movs	r3, #2
 80068a0:	73fb      	strb	r3, [r7, #15]
    break;
 80068a2:	e008      	b.n	80068b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
    break;
 80068a8:	e005      	b.n	80068b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068aa:	2302      	movs	r3, #2
 80068ac:	73fb      	strb	r3, [r7, #15]
    break;
 80068ae:	e002      	b.n	80068b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80068b0:	2302      	movs	r3, #2
 80068b2:	73fb      	strb	r3, [r7, #15]
    break;
 80068b4:	bf00      	nop
  }
  return usb_status;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop

080068c4 <__libc_init_array>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	2600      	movs	r6, #0
 80068c8:	4d0c      	ldr	r5, [pc, #48]	; (80068fc <__libc_init_array+0x38>)
 80068ca:	4c0d      	ldr	r4, [pc, #52]	; (8006900 <__libc_init_array+0x3c>)
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	42a6      	cmp	r6, r4
 80068d2:	d109      	bne.n	80068e8 <__libc_init_array+0x24>
 80068d4:	f000 f822 	bl	800691c <_init>
 80068d8:	2600      	movs	r6, #0
 80068da:	4d0a      	ldr	r5, [pc, #40]	; (8006904 <__libc_init_array+0x40>)
 80068dc:	4c0a      	ldr	r4, [pc, #40]	; (8006908 <__libc_init_array+0x44>)
 80068de:	1b64      	subs	r4, r4, r5
 80068e0:	10a4      	asrs	r4, r4, #2
 80068e2:	42a6      	cmp	r6, r4
 80068e4:	d105      	bne.n	80068f2 <__libc_init_array+0x2e>
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ec:	4798      	blx	r3
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7ee      	b.n	80068d0 <__libc_init_array+0xc>
 80068f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f6:	4798      	blx	r3
 80068f8:	3601      	adds	r6, #1
 80068fa:	e7f2      	b.n	80068e2 <__libc_init_array+0x1e>
 80068fc:	0800699c 	.word	0x0800699c
 8006900:	0800699c 	.word	0x0800699c
 8006904:	0800699c 	.word	0x0800699c
 8006908:	080069a0 	.word	0x080069a0

0800690c <memset>:
 800690c:	4603      	mov	r3, r0
 800690e:	4402      	add	r2, r0
 8006910:	4293      	cmp	r3, r2
 8006912:	d100      	bne.n	8006916 <memset+0xa>
 8006914:	4770      	bx	lr
 8006916:	f803 1b01 	strb.w	r1, [r3], #1
 800691a:	e7f9      	b.n	8006910 <memset+0x4>

0800691c <_init>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	bf00      	nop
 8006920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006922:	bc08      	pop	{r3}
 8006924:	469e      	mov	lr, r3
 8006926:	4770      	bx	lr

08006928 <_fini>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	bf00      	nop
 800692c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692e:	bc08      	pop	{r3}
 8006930:	469e      	mov	lr, r3
 8006932:	4770      	bx	lr
